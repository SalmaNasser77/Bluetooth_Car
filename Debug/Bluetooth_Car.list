
Bluetooth_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080034e4  080034e4  000044e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038f8  080038f8  000050c4  2**0
                  CONTENTS
  4 .ARM          00000000  080038f8  080038f8  000050c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038f8  080038f8  000050c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08003908  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200000c4  080039cc  000050c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080039cc  00005254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cda1  00000000  00000000  000050ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275c  00000000  00000000  00011e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  000145f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ff  00000000  00000000  00014fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001946b  00000000  00000000  0001569f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9b9  00000000  00000000  0002eb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097323  00000000  00000000  0003a4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d17e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  000d182c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d47e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c4 	.word	0x200000c4
 800012c:	00000000 	.word	0x00000000
 8000130:	080034cc 	.word	0x080034cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c8 	.word	0x200000c8
 800014c:	080034cc 	.word	0x080034cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <_ZN4UartC1Em>:
#include "GPIO/Input.h"
#include "GPIO/Output.h"



Uart::Uart(uint32_t baudrate)
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
{
	if(this == reinterpret_cast<Uart*>(Usart1Instance))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <_ZN4UartC1Em+0x24>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d103      	bne.n	8000a56 <_ZN4UartC1Em+0x1a>
	{
		this->IntitalizeUart1(baudrate);
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f812 	bl	8000a7a <_ZN4Uart15IntitalizeUart1Em>
	else if(this == reinterpret_cast<Uart*>(Usart3Instance))
	{

	}

}
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40013800 	.word	0x40013800

08000a64 <_ZN4UartnwEj13UsartInstance>:

void* Uart::operator new(size_t, UsartInstance uart)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	return reinterpret_cast<void*>(uart);
 8000a6e:	683b      	ldr	r3, [r7, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <_ZN4Uart15IntitalizeUart1Em>:

void Uart::IntitalizeUart1(uint32_t baudrate)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]

	this->setUart1_bins();
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f80f 	bl	8000aa8 <_ZN4Uart13setUart1_binsEv>
	this->setUart1_mode_fullduplex();
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f82e 	bl	8000aec <_ZN4Uart24setUart1_mode_fullduplexEv>
	this->setUart1_baudrate(baudrate);
 8000a90:	6839      	ldr	r1, [r7, #0]
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f83a 	bl	8000b0c <_ZN4Uart17setUart1_baudrateEm>
	this->EnableUart1();
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f849 	bl	8000b30 <_ZN4Uart11EnableUart1Ev>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <_ZN4Uart13setUart1_binsEv>:

void Uart::setUart1_bins()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	//PA9(TX) is output alternate push-pull
	Output TX_Uart1(GPIOA, UART1_TX_BIN, OUTPUT_MODES::OUTPUT_ALT_PUSH_PULL);
 8000ab0:	f107 0014 	add.w	r0, r7, #20
 8000ab4:	230b      	movs	r3, #11
 8000ab6:	2209      	movs	r2, #9
 8000ab8:	490b      	ldr	r1, [pc, #44]	@ (8000ae8 <_ZN4Uart13setUart1_binsEv+0x40>)
 8000aba:	f001 feed 	bl	8002898 <_ZN6OutputC1EP12GPIO_TypeDefh12OUTPUT_MODES>

	//PA10(RX) is input floating
	Input RX_Uart1(GPIOA, UART1_RX_BIN, INPUT_MODES::INPUT_FLOATING);
 8000abe:	f107 0008 	add.w	r0, r7, #8
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	220a      	movs	r2, #10
 8000ac6:	4908      	ldr	r1, [pc, #32]	@ (8000ae8 <_ZN4Uart13setUart1_binsEv+0x40>)
 8000ac8:	f001 fea4 	bl	8002814 <_ZN5InputC1EP12GPIO_TypeDefh11INPUT_MODES>
}
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fed7 	bl	8002884 <_ZN5InputD1Ev>
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 ff17 	bl	800290e <_ZN6OutputD1Ev>
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010800 	.word	0x40010800

08000aec <_ZN4Uart24setUart1_mode_fullduplexEv>:

void Uart::setUart1_mode_fullduplex()
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	this->CR1 |= (1 << UART1_RX_Enable_Bin) | (1 << UART1_TX_Enable_Bin);  // Enable Recieve and Transmit
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	f043 020c 	orr.w	r2, r3, #12
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60da      	str	r2, [r3, #12]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
	...

08000b0c <_ZN4Uart17setUart1_baudrateEm>:

void Uart::setUart1_baudrate(uint32_t baudrate)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	this->BRR = F_OSC / baudrate;   // HSI = 8mhz setting baudrate
 8000b16:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <_ZN4Uart17setUart1_baudrateEm+0x20>)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	609a      	str	r2, [r3, #8]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	007a1200 	.word	0x007a1200

08000b30 <_ZN4Uart11EnableUart1Ev>:

void Uart::EnableUart1()
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	this->CR1 |= (1 << UART1_Enable_Bin);  // enable uart
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	60da      	str	r2, [r3, #12]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <_ZN4Uart8UartReadEv>:
		i++;
	}
}

char Uart::UartRead()
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	while(!(USART1->SR & (1 << 5)));
 8000b58:	bf00      	nop
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <_ZN4Uart8UartReadEv+0x30>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f4      	bne.n	8000b5a <_ZN4Uart8UartReadEv+0xa>
	return USART1->DR;
 8000b70:	4b03      	ldr	r3, [pc, #12]	@ (8000b80 <_ZN4Uart8UartReadEv+0x30>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40013800 	.word	0x40013800

08000b84 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	fb01 f202 	mul.w	r2, r1, r2
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
	...

08000c14 <_ZN9GPIO_BaseC1EP12GPIO_TypeDefh>:

#include "GPIO/GPIO_Base.h"



GPIO_Base::GPIO_Base(GPIO_TypeDef * GPIO, uint8_t pin):port_(GPIO), pin_(pin)
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	711a      	strb	r2, [r3, #4]
{
	if(!output_init[port_])
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4619      	mov	r1, r3
 8000c32:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <_ZN9GPIO_BaseC1EP12GPIO_TypeDefh+0x64>)
 8000c34:	f000 f82f 	bl	8000c96 <_ZNSt13unordered_mapIP12GPIO_TypeDefbSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_bEEEixERS7_>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d013      	beq.n	8000c6e <_ZN9GPIO_BaseC1EP12GPIO_TypeDefh+0x5a>
	{
		port_->CRL = 0;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
		port_->CRH = 0;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
		port_->ODR = 0;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
		output_init[port_] = true;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <_ZN9GPIO_BaseC1EP12GPIO_TypeDefh+0x64>)
 8000c64:	f000 f817 	bl	8000c96 <_ZNSt13unordered_mapIP12GPIO_TypeDefbSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_bEEEixERS7_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
	}
}
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000e0 	.word	0x200000e0

08000c7c <_ZNSt13unordered_mapIP12GPIO_TypeDefbSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_bEEED1Ev>:
   */
  template<typename _Key, typename _Tp,
	   typename _Hash = hash<_Key>,
	   typename _Pred = equal_to<_Key>,
	   typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
    class unordered_map
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f876 	bl	8000d78 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_ZNSt13unordered_mapIP12GPIO_TypeDefbSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_bEEEixERS7_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6839      	ldr	r1, [r7, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f883 	bl	8000db0 <_ZNSt8__detail9_Map_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZNSt4pairIKP12GPIO_TypeDefbEC1IS1_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000cc0:	68b8      	ldr	r0, [r7, #8]
 8000cc2:	f000 f8cb 	bl	8000e5c <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f864 	bl	8000d9c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	711a      	strb	r2, [r3, #4]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_ZNSaISt4pairIKP12GPIO_TypeDefbEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f8be 	bl	8000e70 <_ZNSt15__new_allocatorISt4pairIKP12GPIO_TypeDefbEEC1Ev>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZNSaISt4pairIKP12GPIO_TypeDefbEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 f8bc 	bl	8000e84 <_ZNSt15__new_allocatorISt4pairIKP12GPIO_TypeDefbEED1Ev>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_ZNSt13unordered_mapIP12GPIO_TypeDefbSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_bEEEC1ESt16initializer_listIS8_EjRKS3_RKS5_RKS9_>:
      unordered_map(initializer_list<value_type> __l,
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b088      	sub	sp, #32
 8000d1a:	af04      	add	r7, sp, #16
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	1d38      	adds	r0, r7, #4
 8000d20:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d24:	603b      	str	r3, [r7, #0]
      : _M_h(__l, __n, __hf, __eql, __a)
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	1d3a      	adds	r2, r7, #4
 8000d38:	ca06      	ldmia	r2, {r1, r2}
 8000d3a:	f000 f8ad 	bl	8000e98 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS4_EjRKSB_RKS9_RKS5_>
      { }
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4618      	mov	r0, r3
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEELb1EED1Ev>:
	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;

  /// Specialization using EBO.
  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f8c5 	bl	8000ee0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEED1Ev>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEED1Ev>:
  /**
   * This type deals with all allocation and keeps an allocator instance
   * through inheritance to benefit from EBO when possible.
   */
  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffed 	bl	8000d48 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEELb1EED1Ev>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f8b9 	bl	8000ef8 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8d6 	bl	8000f38 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffe7 	bl	8000d60 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEED1Ev>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <_ZNSt8__detail9_Map_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b08f      	sub	sp, #60	@ 0x3c
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000dc2:	f000 f8c9 	bl	8000f58 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8000dc6:	62b8      	str	r0, [r7, #40]	@ 0x28
      std::size_t __bkt = __h->_M_bucket_index(__code);
 8000dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000dca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000dcc:	f000 f8d8 	bl	8000f80 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8000dd0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 8000dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000dda:	f000 f8e2 	bl	8000fa2 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>
 8000dde:	6238      	str	r0, [r7, #32]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <_ZNSt8__detail9_Map_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x46>
	return __node->_M_v().second;
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	3304      	adds	r3, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f8f2 	bl	8000fd4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE4_M_vEv>
 8000df0:	4603      	mov	r3, r0
 8000df2:	1d1c      	adds	r4, r3, #4
 8000df4:	e02a      	b.n	8000e4c <_ZNSt8__detail9_Map_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0x9c>
      typename __hashtable::_Scoped_node __node {
 8000df6:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
	std::tuple<const key_type&>(__k),
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f8f4 	bl	8000fec <_ZNSt5tupleIJRKP12GPIO_TypeDefEEC1ILb1ELb1EEES3_>
      typename __hashtable::_Scoped_node __node {
 8000e04:	f107 0218 	add.w	r2, r7, #24
 8000e08:	f107 0010 	add.w	r0, r7, #16
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	4613      	mov	r3, r2
 8000e14:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <_ZNSt8__detail9_Map_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS4_+0xa8>)
 8000e16:	4621      	mov	r1, r4
 8000e18:	f000 f8f7 	bl	800100a <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e28:	f000 f928 	bl	800107c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
      return __pos->second;
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f968 	bl	800110e <_ZNKSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEptEv>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	1d1c      	adds	r4, r3, #4
    }
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f903 	bl	8001052 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8000e4c:	4623      	mov	r3, r4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3734      	adds	r7, #52	@ 0x34
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	080034e4 	.word	0x080034e4

08000e5c <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <_ZNSt15__new_allocatorISt4pairIKP12GPIO_TypeDefbEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <_ZNSt15__new_allocatorISt4pairIKP12GPIO_TypeDefbEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ESt16initializer_listIS4_EjRKSB_RKS9_RKS5_>:
      _Hashtable(initializer_list<value_type> __l,
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	1d38      	adds	r0, r7, #4
 8000ea2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ea6:	603b      	str	r3, [r7, #0]
		   __hf, __eql, __a, __unique_keys{})
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f93e 	bl	800112c <_ZNKSt16initializer_listISt4pairIKP12GPIO_TypeDefbEE5beginEv>
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f944 	bl	8001142 <_ZNKSt16initializer_listISt4pairIKP12GPIO_TypeDefbEE3endEv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f88d 500c 	strb.w	r5, [sp, #12]
 8000ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	6a3b      	ldr	r3, [r7, #32]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4621      	mov	r1, r4
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f000 f948 	bl	8001166 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS4_EET_SL_jRKSB_RKS9_RKS5_St17integral_constantIbLb1EE>
      { }
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdb0      	pop	{r4, r5, r7, pc}

08000ee0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEED1Ev>:
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f95f 	bl	80011ac <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEED1Ev>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f95d 	bl	80011c0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f963 	bl	80011d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE19_M_deallocate_nodesEPS7_>
      __builtin_memset(_M_buckets, 0,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f002 fa04 	bl	800332c <memset>
      _M_element_count = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
    }
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f95b 	bl	8001206 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>:
      _M_hash_code(const _Key& __k) const
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f966 	bl	8001234 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4610      	mov	r0, r2
 8000f72:	f000 f96b 	bl	800124c <_ZNKSt4hashIP12GPIO_TypeDefEclES1_>
 8000f76:	4603      	mov	r3, r0
      }
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	6839      	ldr	r1, [r7, #0]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f965 	bl	8001262 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f965 	bl	8001286 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>
 8000fbc:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	e000      	b.n	8000fcc <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS3_j+0x2a>
	return nullptr;
 8000fca:	2300      	movs	r3, #0
      }
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE4_M_vEv>:
      _M_v() noexcept
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f997 	bl	8001310 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZNSt5tupleIJRKP12GPIO_TypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f995 	bl	800132a <_ZNSt11_Tuple_implILj0EJRKP12GPIO_TypeDefEEC1ES3_>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 800100a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 800101e:	68bc      	ldr	r4, [r7, #8]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f991 	bl	8001348 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001026:	4605      	mov	r5, r0
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f000 f997 	bl	800135c <_ZSt7forwardISt5tupleIJRKP12GPIO_TypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800102e:	4606      	mov	r6, r0
 8001030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001032:	f000 f99d 	bl	8001370 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001036:	4603      	mov	r3, r0
 8001038:	4632      	mov	r2, r6
 800103a:	4629      	mov	r1, r5
 800103c:	4620      	mov	r0, r4
 800103e:	f000 f9ae 	bl	800139e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESE_IJEEEEEPS7_DpOT_>
 8001042:	4602      	mov	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	605a      	str	r2, [r3, #4]
	  { }
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001052 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f000 f9d7 	bl	8001420 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE18_M_deallocate_nodeEPS7_>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b08d      	sub	sp, #52	@ 0x34
 8001080:	af02      	add	r7, sp, #8
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3310      	adds	r3, #16
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fdb4 	bl	8000bfc <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8001094:	4603      	mov	r3, r0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f103 0110 	add.w	r1, r3, #16
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	68dc      	ldr	r4, [r3, #12]
 80010ac:	f107 0014 	add.w	r0, r7, #20
 80010b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4623      	mov	r3, r4
 80010b6:	f001 ff91 	bl	8002fdc <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 80010ba:	7d3b      	ldrb	r3, [r7, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00a      	beq.n	80010d6 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 f9c5 	bl	8001456 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff ff56 	bl	8000f80 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 80010d4:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3304      	adds	r3, #4
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	4619      	mov	r1, r3
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f9c8 	bl	8001474 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f9ce 	bl	800148a <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>
      ++_M_element_count;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	6839      	ldr	r1, [r7, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fa0a 	bl	8001518 <_ZNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8001104:	6a3b      	ldr	r3, [r7, #32]
    }
 8001106:	4618      	mov	r0, r3
 8001108:	372c      	adds	r7, #44	@ 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <_ZNKSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEptEv>:
      operator->() const noexcept
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3304      	adds	r3, #4
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f8f7 	bl	8001310 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>
 8001122:	4603      	mov	r3, r0
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_ZNKSt16initializer_listISt4pairIKP12GPIO_TypeDefbEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <_ZNKSt16initializer_listISt4pairIKP12GPIO_TypeDefbEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001142:	b590      	push	{r4, r7, lr}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffee 	bl	800112c <_ZNKSt16initializer_listISt4pairIKP12GPIO_TypeDefbEE5beginEv>
 8001150:	4604      	mov	r4, r0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f9ef 	bl	8001536 <_ZNKSt16initializer_listISt4pairIKP12GPIO_TypeDefbEE4sizeEv>
 8001158:	4603      	mov	r3, r0
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4423      	add	r3, r4
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bd90      	pop	{r4, r7, pc}

08001166 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS4_EET_SL_jRKSB_RKS9_RKS5_St17integral_constantIbLb1EE>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001166:	b580      	push	{r7, lr}
 8001168:	b088      	sub	sp, #32
 800116a:	af02      	add	r7, sp, #8
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	603b      	str	r3, [r7, #0]
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
 8001174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	6a3a      	ldr	r2, [r7, #32]
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f000 f9e4 	bl	800154c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSB_RKS9_RKS5_>
	for (; __f != __l; ++__f)
 8001184:	e009      	b.n	800119a <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS4_EET_SL_jRKSB_RKS9_RKS5_St17integral_constantIbLb1EE+0x34>
	  this->insert(*__f);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	68f9      	ldr	r1, [r7, #12]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fa04 	bl	800159c <_ZNSt8__detail12_Insert_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS5_>
	for (; __f != __l; ++__f)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3308      	adds	r3, #8
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d1f1      	bne.n	8001186 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1IPKS4_EET_SL_jRKSB_RKS9_RKS5_St17integral_constantIbLb1EE+0x20>
      }
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEED1Ev>:
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE19_M_deallocate_nodesEPS7_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 80011e0:	e009      	b.n	80011f6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE19_M_deallocate_nodesEPS7_+0x20>
	{
	  __node_ptr __tmp = __n;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f000 f9f6 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 80011ec:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f915 	bl	8001420 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE18_M_deallocate_nodeEPS7_>
      while (__n)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f2      	bne.n	80011e2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE19_M_deallocate_nodesEPS7_+0xc>
	}
    }
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f9ea 	bl	80015ee <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d105      	bne.n	800122c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 f9f9 	bl	800161c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800122a:	e000      	b.n	800122e <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x28>
	  return;
 800122c:	bf00      	nop
      }
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fa10 	bl	8001662 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP12GPIO_TypeDefELb1EE7_M_cgetEv>
 8001242:	4603      	mov	r3, r0
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZNKSt4hashIP12GPIO_TypeDefEclES1_>:
  /// Partial specializations for pointer types.
  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
      { return reinterpret_cast<size_t>(__p); }
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc9c 	bl	8000bb4 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 800127c:	4603      	mov	r3, r0
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x26>
	return nullptr;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e02d      	b.n	8001308 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	3304      	adds	r3, #4
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 f9db 	bl	8001676 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS5_Lb0EEE>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x44>
	    return __prev_p;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	e01e      	b.n	8001308 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00c      	beq.n	80012ec <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x66>
 80012d2:	6938      	ldr	r0, [r7, #16]
 80012d4:	f000 f980 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 80012d8:	4603      	mov	r3, r0
 80012da:	3304      	adds	r3, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f9e6 	bl	80016b0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d001      	beq.n	80012f0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6a>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x6c>
 80012f0:	2300      	movs	r3, #0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x7e>
	  __prev_p = __p;
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 80012fa:	6938      	ldr	r0, [r7, #16]
 80012fc:	f000 f96c 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 8001300:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8001302:	e7d6      	b.n	80012b2 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS3_j+0x2c>
	    break;
 8001304:	bf00      	nop
      return nullptr;
 8001306:	2300      	movs	r3, #0
    }
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>:
      _M_valptr() noexcept
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f9d9 	bl	80016d2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE6_M_ptrEv>
 8001320:	4603      	mov	r3, r0
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZNSt11_Tuple_implILj0EJRKP12GPIO_TypeDefEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f9d6 	bl	80016ea <_ZNSt10_Head_baseILj0ERKP12GPIO_TypeDefLb0EEC1ES3_>
      { }
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <_ZSt7forwardISt5tupleIJRKP12GPIO_TypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <_ZNSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEC1Ev>:
    struct _Hash_node
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fc03 	bl	8000b9a <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS5_EESE_IJEEEEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 800139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 f9a9 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2101      	movs	r1, #1
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f9b0 	bl	800171e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE8allocateERS8_j>
 80013be:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 80013c0:	6978      	ldr	r0, [r7, #20]
 80013c2:	f000 f9bb 	bl	800173c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEPT_S9_>
 80013c6:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4619      	mov	r1, r3
 80013cc:	200c      	movs	r0, #12
 80013ce:	f7ff fbd9 	bl	8000b84 <_ZnwjPv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ffd5 	bl	8001384 <_ZNSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f993 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 80013e0:	4604      	mov	r4, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3304      	adds	r3, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff92 	bl	8001310 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>
 80013ec:	4605      	mov	r5, r0
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f7ff ffaa 	bl	8001348 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80013f4:	4606      	mov	r6, r0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffb0 	bl	800135c <_ZSt7forwardISt5tupleIJRKP12GPIO_TypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80013fc:	4680      	mov	r8, r0
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f7ff ffb6 	bl	8001370 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001404:	4603      	mov	r3, r0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4643      	mov	r3, r8
 800140a:	4632      	mov	r2, r6
 800140c:	4629      	mov	r1, r5
 800140e:	4620      	mov	r0, r4
 8001410:	f000 f99e 	bl	8001750 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESE_IJEEEEEvRS8_PT_DpOT0_>
	    return __n;
 8001414:	693b      	ldr	r3, [r7, #16]
      }
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001420 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE18_M_deallocate_nodeEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f96b 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 8001430:	4604      	mov	r4, r0
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3304      	adds	r3, #4
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff6a 	bl	8001310 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>
 800143c:	4603      	mov	r3, r0
 800143e:	4619      	mov	r1, r3
 8001440:	4620      	mov	r0, r4
 8001442:	f000 f9b2 	bl	80017aa <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE7destroyIS6_EEvRS8_PT_>
      _M_deallocate_node_ptr(__n);
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f9bb 	bl	80017c4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE22_M_deallocate_node_ptrEPS7_>
    }
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}

08001456 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8001462:	461a      	mov	r2, r3
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f9c2 	bl	80017f0 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
      { }
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800148a:	b590      	push	{r4, r7, lr}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d011      	beq.n	80014ca <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	601a      	str	r2, [r3, #0]
    }
 80014c8:	e022      	b.n	8001510 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00f      	beq.n	8001500 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f877 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	3304      	adds	r3, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f8dd 	bl	80016b0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 80014f6:	4603      	mov	r3, r0
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4423      	add	r3, r4
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	3208      	adds	r2, #8
 800150e:	601a      	str	r2, [r3, #0]
    }
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bd90      	pop	{r4, r7, pc}

08001518 <_ZNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f9c6 	bl	80018b8 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP12GPIO_TypeDefbELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNKSt16initializer_listISt4pairIKP12GPIO_TypeDefbEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSB_RKS9_RKS5_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
    : _Hashtable(__h, __eq, __a)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 f9b7 	bl	80018d4 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSB_RKS9_RKS5_>
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3310      	adds	r3, #16
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	4618      	mov	r0, r3
 800156e:	f001 fcf5 	bl	8002f5c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8001572:	6178      	str	r0, [r7, #20]
      if (__bkt_count > _M_bucket_count)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	429a      	cmp	r2, r3
 800157c:	d909      	bls.n	8001592 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1EjRKSB_RKS9_RKS5_+0x46>
	  _M_buckets = _M_allocate_buckets(__bkt_count);
 800157e:	6979      	ldr	r1, [r7, #20]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f9e7 	bl	8001954 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8001586:	4602      	mov	r2, r0
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]
	  _M_bucket_count = __bkt_count;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	605a      	str	r2, [r3, #4]
    }
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZNSt8__detail12_Insert_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE6insertERKS5_>:
      insert(const value_type& __v)
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
	__hashtable& __h = _M_conjure_hashtable();
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f000 f9f0 	bl	800198e <_ZNSt8__detail12_Insert_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>
 80015ae:	6178      	str	r0, [r7, #20]
	__node_gen_type __node_gen(__h);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	6979      	ldr	r1, [r7, #20]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f9f3 	bl	80019a2 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEC1ERNS_16_Hashtable_allocIS8_EE>
	return __h._M_insert(__v, __node_gen, __unique_keys{});
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	f88d 4000 	strb.w	r4, [sp]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6979      	ldr	r1, [r7, #20]
 80015ca:	f000 f9f8 	bl	80019be <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>
 80015ce:	bf00      	nop
      }
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}

080015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>:
      _M_next() const noexcept
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3318      	adds	r3, #24
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8001628:	68b8      	ldr	r0, [r7, #8]
 800162a:	f000 f9ef 	bl	8001a0c <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 800162e:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f868 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 8001636:	4602      	mov	r2, r0
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f9f0 	bl	8001a24 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6979      	ldr	r1, [r7, #20]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fa02 	bl	8001a56 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f9f1 	bl	8001a3e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP12GPIO_TypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS5_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 8001684:	6839      	ldr	r1, [r7, #0]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f9f4 	bl	8001a74 <_ZNSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x30>
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f9f7 	bl	8001a8a <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueIS5_Lb0EEE>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x30>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS4_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x32>
 80016a6:	2300      	movs	r3, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fa01 	bl	8001aca <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fa17 	bl	8001b0e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE7_M_addrEv>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_ZNSt10_Head_baseILj0ERKP12GPIO_TypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fa07 	bl	8001b22 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEELb1EE6_M_getEv>
 8001714:	4603      	mov	r3, r0
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE8allocateERS8_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001728:	2200      	movs	r2, #0
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fa03 	bl	8001b38 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE8allocateEjPKv>
 8001732:	4603      	mov	r3, r0
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEPT_S9_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8001744:	687b      	ldr	r3, [r7, #4]
    }
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESE_IJEEEEEvRS8_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fdf2 	bl	8001348 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001764:	4604      	mov	r4, r0
 8001766:	6838      	ldr	r0, [r7, #0]
 8001768:	f7ff fdf8 	bl	800135c <_ZSt7forwardISt5tupleIJRKP12GPIO_TypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800176c:	4605      	mov	r5, r0
 800176e:	6a38      	ldr	r0, [r7, #32]
 8001770:	f7ff fdfe 	bl	8001370 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001774:	4603      	mov	r3, r0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	462b      	mov	r3, r5
 800177a:	4622      	mov	r2, r4
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 fa18 	bl	8001bb4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESD_IJEEEEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bdb0      	pop	{r4, r5, r7, pc}

0800178c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fa31 	bl	8001c04 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE10deallocateEPS7_j>
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE7destroyIS6_EEvRS8_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fa37 	bl	8001c2a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE7destroyIS6_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE22_M_deallocate_node_ptrEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f000 fa35 	bl	8001c3e <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEES7_Lb0EE10pointer_toERS7_>
 80017d4:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ff95 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 80017dc:	4603      	mov	r3, r0
 80017de:	2201      	movs	r2, #1
 80017e0:	68f9      	ldr	r1, [r7, #12]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffd2 	bl	800178c <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE10deallocateERS8_PS7_j>
    }
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f8a8 	bl	8001954 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8001804:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff fcda 	bl	80011c0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800180c:	6278      	str	r0, [r7, #36]	@ 0x24
      _M_before_begin._M_nxt = nullptr;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
      while (__p)
 8001818:	e03e      	b.n	8001898 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 800181a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800181c:	f7ff fedc 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 8001820:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	3304      	adds	r3, #4
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	4619      	mov	r1, r3
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f94d 	bl	8001aca <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 8001830:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11a      	bne.n	8001876 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184c:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	3208      	adds	r2, #8
 800185a:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	4413      	add	r3, r2
 800186c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800186e:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	e00e      	b.n	8001894 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001892:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__p)
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1bd      	bne.n	800181a <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff fb4a 	bl	8000f38 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	601a      	str	r2, [r3, #0]
    }
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP12GPIO_TypeDefbELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSB_RKS9_RKS5_>:
      _Hashtable(const _Hash& __h, const _Equal& __eq,
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
	__enable_default_ctor(_Enable_default_constructor_tag{})
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f9c2 	bl	8001c70 <_ZNSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_>
	__hashtable_alloc(__node_alloc_type(__a)),
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	6839      	ldr	r1, [r7, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f9af 	bl	8001c56 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1IS5_EERKSaIT_E>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f9c9 	bl	8001c96 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEC1IS8_EEOT_>
	__hashtable_alloc(__node_alloc_type(__a)),
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fae9 	bl	8000ee0 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEED1Ev>
	__enable_default_ctor(_Enable_default_constructor_tag{})
 800190e:	4621      	mov	r1, r4
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f9d2 	bl	8001cba <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f103 0218 	add.w	r2, r3, #24
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3308      	adds	r3, #8
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f935 	bl	8000b9a <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3310      	adds	r3, #16
 800193a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f94b 	bl	8000bda <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
      { }
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4618      	mov	r0, r3
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}

08001954 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3318      	adds	r3, #24
 8001978:	e005      	b.n	8001986 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f9a7 	bl	8001cd0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE19_M_allocate_bucketsEj>
 8001982:	4603      	mov	r3, r0
 8001984:	bf00      	nop
      }
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_ZNSt8__detail12_Insert_baseIP12GPIO_TypeDefSt4pairIKS2_bESaIS5_ENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEEE20_M_conjure_hashtableEv>:
      _M_conjure_hashtable()
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
      { return *(static_cast<__hashtable*>(this)); }
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEC1ERNS_16_Hashtable_allocIS8_EE>:
      _AllocNode(__hashtable_alloc& __h)
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
      : _M_h(__h) { }
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_insertIRKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_RKT0_St17integral_constantIbLb1EE>:
	_M_insert(_Arg&& __arg, const _NodeGenerator& __node_gen,
 80019be:	b590      	push	{r4, r7, lr}
 80019c0:	b089      	sub	sp, #36	@ 0x24
 80019c2:	af02      	add	r7, sp, #8
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	603b      	str	r3, [r7, #0]
	    _S_forward_key(_ExtractKey{}(std::forward<_Arg>(__arg))),
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f9ac 	bl	8001d2a <_ZSt7forwardIRKSt4pairIKP12GPIO_TypeDefbEEOT_RNSt16remove_referenceIS7_E4typeE>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f9af 	bl	8001d3e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP12GPIO_TypeDefbEEEONS0_10__1st_typeIT_E4typeEOSA_>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f9b8 	bl	8001d58 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>
 80019e8:	4604      	mov	r4, r0
	  return _M_insert_unique(
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f99d 	bl	8001d2a <_ZSt7forwardIRKSt4pairIKP12GPIO_TypeDefbEEOT_RNSt16remove_referenceIS7_E4typeE>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	4622      	mov	r2, r4
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	f000 f9b5 	bl	8001d6c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_>
	    std::forward<_Arg>(__arg), __node_gen);
 8001a02:	bf00      	nop
	}
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
      pointer_to(element_type& __r) noexcept
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fa57 	bl	8001ec8 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fa56 	bl	8001ee0 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fa54 	bl	8001ef4 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fa4e 	bl	8001f08 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZNSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
      { return true; }
 8001a7e:	2301      	movs	r3, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_key_equalsERS4_RKNS_16_Hash_node_valueIS5_Lb0EEE>:
      _M_key_equals(const _Key& __k,
 8001a8a:	b590      	push	{r4, r7, lr}
 8001a8c:	b087      	sub	sp, #28
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fa46 	bl	8001f28 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fa4d 	bl	8001f40 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE4_M_vEv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f945 	bl	8001d3e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP12GPIO_TypeDefbEEEONS0_10__1st_typeIT_E4typeEOSA_>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	4620      	mov	r0, r4
 8001abc:	f000 fa4c 	bl	8001f58 <_ZNKSt8equal_toIP12GPIO_TypeDefEclERKS1_S4_>
 8001ac0:	4603      	mov	r3, r0
      }
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	371c      	adds	r7, #28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}

08001aca <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fa31 	bl	8001f40 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE4_M_vEv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f929 	bl	8001d3e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP12GPIO_TypeDefbEEEONS0_10__1st_typeIT_E4typeEOSA_>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fa31 	bl	8000f58 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS4_>
 8001af6:	4601      	mov	r1, r0
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f858 	bl	8000bb4 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8001b04:	4603      	mov	r3, r0
      }
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE7_M_addrEv>:
      _M_addr() noexcept
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8001b16:	687b      	ldr	r3, [r7, #4]
      }
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
	...

08001b38 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE8allocateEjPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 3308. std::allocator<void>().allocate(n)
	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 fa1b 	bl	8001f80 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE11_M_max_sizeEv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	bf8c      	ite	hi
 8001b52:	2301      	movhi	r3, #1
 8001b54:	2300      	movls	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf14      	ite	ne
 8001b5c:	2301      	movne	r3, #1
 8001b5e:	2300      	moveq	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d007      	beq.n	8001b76 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE8allocateEjPKv+0x3e>
	  {
	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
	    // 3190. allocator::allocate sometimes returns too little storage
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE8allocateEjPKv+0x58>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001b6e:	f001 f9f1 	bl	8002f54 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001b72:	f001 f9ec 	bl	8002f4e <_ZSt17__throw_bad_allocv>
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 f9d3 	bl	8002f2c <_Znwj>
 8001b86:	4603      	mov	r3, r0
      }
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	15555555 	.word	0x15555555

08001b94 <_ZNSt5tupleIJRKP12GPIO_TypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f9f7 	bl	8001f98 <_ZNSt11_Tuple_implILj0EJRKP12GPIO_TypeDefEEC1EOS4_>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS5_EESD_IJEEEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	2008      	movs	r0, #8
 8001bc8:	f7fe ffdc 	bl	8000b84 <_ZnwjPv>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fbba 	bl	8001348 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	f7ff fbc1 	bl	800135c <_ZSt7forwardISt5tupleIJRKP12GPIO_TypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ffd6 	bl	8001b94 <_ZNSt5tupleIJRKP12GPIO_TypeDefEEC1EOS4_>
 8001be8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001bea:	f7ff fbc1 	bl	8001370 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001bee:	f107 0214 	add.w	r2, r7, #20
 8001bf2:	4633      	mov	r3, r6
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f000 f9dd 	bl	8001fb6 <_ZNSt4pairIKP12GPIO_TypeDefbEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8001bfc:	bf00      	nop
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c04 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	68b8      	ldr	r0, [r7, #8]
 8001c1e:	f001 f983 	bl	8002f28 <_ZdlPvj>
      }
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE7destroyIS6_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEES7_Lb0EE10pointer_toERS7_>:
      pointer_to(element_type& __r) noexcept
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f9c9 	bl	8001fde <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEPT_RS8_>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1IS5_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f9c8 	bl	8001ff6 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1Ev>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_ZNSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1ERKSA_RKS8_>:
      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
      : __hash_code_base(__hash), _EqualEBO(__eq)
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f9c3 	bl	800200a <_ZNSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS8_>
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f9cd 	bl	8002026 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP12GPIO_TypeDefELb1EEC1IRKS4_EEOT_>
      { }
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEC1IS8_EEOT_>:
	_Hashtable_alloc(_Alloc&& __a)
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
	: __ebo_node_alloc(std::forward<_Alloc>(__a))
 8001ca0:	6838      	ldr	r0, [r7, #0]
 8001ca2:	f000 f9cd 	bl	8002040 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f9d2 	bl	8002054 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEELb1EEC1IS8_EEOT_>
	{ }
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_ZNSt27_Enable_default_constructorILb1ENSt8__detail15_Hash_node_baseEEC1ESt31_Enable_default_constructor_tag>:
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;

    // Can be used in other ctors.
    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	7039      	strb	r1, [r7, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fd13 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fe9b 	bl	8001a24 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	6839      	ldr	r1, [r7, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f9bf 	bl	8002078 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8001cfa:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8001cfc:	6978      	ldr	r0, [r7, #20]
 8001cfe:	f000 f9ca 	bl	8002096 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8001d02:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f001 fb0c 	bl	800332c <memset>
      return __p;
 8001d14:	693c      	ldr	r4, [r7, #16]
    }
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe8f 	bl	8001a3e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8001d20:	4623      	mov	r3, r4
    }
 8001d22:	4618      	mov	r0, r3
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}

08001d2a <_ZSt7forwardIRKSt4pairIKP12GPIO_TypeDefbEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP12GPIO_TypeDefbEEEONS0_10__1st_typeIT_E4typeEOSA_>:
      operator()(_Tp&& __x) const noexcept
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f7ff ffee 	bl	8001d2a <_ZSt7forwardIRKSt4pairIKP12GPIO_TypeDefbEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE14_S_forward_keyERS3_>:
      _S_forward_key(const key_type& __k)
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
      { return __k; }
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b093      	sub	sp, #76	@ 0x4c
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
	if (size() <= __small_size_threshold())
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f000 f995 	bl	80020aa <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8001d80:	4604      	mov	r4, r0
 8001d82:	f000 f99d 	bl	80020c0 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8001d86:	4603      	mov	r3, r0
 8001d88:	429c      	cmp	r4, r3
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d030      	beq.n	8001df8 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0x8c>
	  for (auto __it = begin(); __it != end(); ++__it)
 8001d96:	68b8      	ldr	r0, [r7, #8]
 8001d98:	f000 f999 	bl	80020ce <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e01a      	b.n	8001dd8 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0x6c>
	    if (this->_M_key_equals_tr(__k, *__it._M_cur))
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3304      	adds	r3, #4
 8001da6:	461a      	mov	r2, r3
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	f000 f9d1 	bl	8002152 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueIS5_Lb0EEE>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0x62>
	      return { __it, false };
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001dbc:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f9e3 	bl	8002192 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKP12GPIO_TypeDefbELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>
      }
 8001dcc:	e078      	b.n	8001ec0 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0x154>
	  for (auto __it = begin(); __it != end(); ++__it)
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f9b0 	bl	8002138 <_ZNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEppEv>
 8001dd8:	68b8      	ldr	r0, [r7, #8]
 8001dda:	f000 f98b 	bl	80020f4 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>
 8001dde:	4603      	mov	r3, r0
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001de2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 f990 	bl	8002112 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKP12GPIO_TypeDefbELb0EEES8_>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1d4      	bne.n	8001da2 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0x36>
	__hash_code __code = this->_M_hash_code_tr(__k);
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f000 f9e2 	bl	80021c4 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>
 8001e00:	63f8      	str	r0, [r7, #60]	@ 0x3c
	size_type __bkt = _M_bucket_index(__code);
 8001e02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f7ff f8bb 	bl	8000f80 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001e0a:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (size() > __small_size_threshold())
 8001e0c:	68b8      	ldr	r0, [r7, #8]
 8001e0e:	f000 f94c 	bl	80020aa <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>
 8001e12:	4604      	mov	r4, r0
 8001e14:	f000 f954 	bl	80020c0 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	429c      	cmp	r4, r3
 8001e1c:	bf8c      	ite	hi
 8001e1e:	2301      	movhi	r3, #1
 8001e20:	2300      	movls	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0xf4>
	  if (__node_ptr __node = _M_find_node_tr(__bkt, __k, __code))
 8001e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f000 f9dc 	bl	80021ec <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS6_10_Hash_nodeIS4_Lb0EEEjRKT_j>
 8001e34:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d011      	beq.n	8001e60 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0xf4>
	    return { iterator(__node), false };
 8001e3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e40:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fb68 	bl	8001518 <_ZNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001e4e:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8001e52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e56:	4619      	mov	r1, r3
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f9e0 	bl	800221e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKP12GPIO_TypeDefbELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>
      }
 8001e5e:	e02f      	b.n	8001ec0 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_insert_uniqueIRS3_RKS4_NS6_10_AllocNodeISaINS6_10_Hash_nodeIS4_Lb0EEEEEEEES2_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEOT_OT0_RKT1_+0x154>
	_Scoped_node __node {
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f9f5 	bl	8002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8001e66:	4604      	mov	r4, r0
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	f7ff ff5e 	bl	8001d2a <_ZSt7forwardIRKSt4pairIKP12GPIO_TypeDefbEEOT_RNSt16remove_referenceIS7_E4typeE>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e72:	4619      	mov	r1, r3
 8001e74:	4620      	mov	r0, r4
 8001e76:	f000 f9f5 	bl	8002264 <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKP12GPIO_TypeDefRKSt4pairIS6_bENS_10_AllocNodeISaINS_10_Hash_nodeIS9_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSH_>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fa07 	bl	8002296 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS6_10_Hash_nodeIS4_Lb0EEEPNS6_16_Hashtable_allocISaISK_EEE>
	  = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	9200      	str	r2, [sp, #0]
 8001e8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	f7ff f8f2 	bl	800107c <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	61bb      	str	r3, [r7, #24]
	__node._M_node = nullptr;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
	return { __pos, true };
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001ea6:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f96e 	bl	8002192 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKP12GPIO_TypeDefbELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>
      }
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f8c9 	bl	8001052 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	3744      	adds	r7, #68	@ 0x44
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd90      	pop	{r4, r7, pc}

08001ec8 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f9f2 	bl	80022ba <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68b8      	ldr	r0, [r7, #8]
 8001f1c:	f001 f804 	bl	8002f28 <_ZdlPvj>
      }
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f9cc 	bl	80022ce <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP12GPIO_TypeDefELb1EE7_M_cgetEv>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE4_M_vEv>:
      _M_v() const noexcept
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f9ca 	bl	80022e2 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZNKSt8equal_toIP12GPIO_TypeDefEclERKS1_S4_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001f88:	4b02      	ldr	r3, [pc, #8]	@ (8001f94 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	0aaaaaaa 	.word	0x0aaaaaaa

08001f98 <_ZNSt11_Tuple_implILj0EJRKP12GPIO_TypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	601a      	str	r2, [r3, #0]
      { }
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <_ZNSt4pairIKP12GPIO_TypeDefbEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8001fb6:	b5b0      	push	{r4, r5, r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af02      	add	r7, sp, #8
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	7239      	strb	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8001fc4:	463a      	mov	r2, r7
 8001fc6:	f88d 4000 	strb.w	r4, [sp]
 8001fca:	462b      	mov	r3, r5
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f994 	bl	80022fc <_ZNSt4pairIKP12GPIO_TypeDefbEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdb0      	pop	{r4, r5, r7, pc}

08001fde <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEPT_RS8_>:
    addressof(_Tp& __r) noexcept
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f9a2 	bl	8002330 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEPT_RS8_>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <_ZNSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1ERKS8_>:
      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f994 	bl	8002344 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP12GPIO_TypeDefELb1EEC1IRKS4_EEOT_>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP12GPIO_TypeDefELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 8002030:	6838      	ldr	r0, [r7, #0]
 8002032:	f000 f994 	bl	800235e <_ZSt7forwardIRKSt8equal_toIP12GPIO_TypeDefEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEELb1EEC1IS8_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f7ff ffee 	bl	8002040 <_ZSt7forwardISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8002064:	4603      	mov	r3, r0
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f982 	bl	8002372 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1ERKS7_>
	{ }
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002082:	2200      	movs	r2, #0
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f981 	bl	800238e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 800208c:	4603      	mov	r3, r0
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
      return __ptr;
 800209e:	687b      	ldr	r3, [r7, #4]
    }
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE4sizeEv>:
      size() const noexcept
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 80020c4:	f000 f98c 	bl	80023e0 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIP12GPIO_TypeDefEE22__small_size_thresholdEv>
 80020c8:	4603      	mov	r3, r0
      }
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5beginEv>:
      begin() noexcept
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff f872 	bl	80011c0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80020dc:	4602      	mov	r2, r0
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fa17 	bl	8001518 <_ZNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE3endEv>:
      end() noexcept
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fa08 	bl	8001518 <_ZNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKP12GPIO_TypeDefbELb0EEES8_>:
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur != __y._M_cur; }
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <_ZNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEppEv>:
      operator++() noexcept
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f953 	bl	80023ee <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP12GPIO_TypeDefbELb0EE7_M_incrEv>
	return *this;
 8002148:	687b      	ldr	r3, [r7, #4]
      }
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueIS5_Lb0EEE>:
	_M_key_equals_tr(const _Kt& __k,
 8002152:	b590      	push	{r4, r7, lr}
 8002154:	b087      	sub	sp, #28
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
	  return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7ff fee2 	bl	8001f28 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8002164:	4604      	mov	r4, r0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fee9 	bl	8001f40 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE4_M_vEv>
 800216e:	4602      	mov	r2, r0
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fde1 	bl	8001d3e <_ZNKSt8__detail10_Select1stclIRKSt4pairIKP12GPIO_TypeDefbEEEONS0_10__1st_typeIT_E4typeEOSA_>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff fee8 	bl	8001f58 <_ZNKSt8equal_toIP12GPIO_TypeDefEclERKS1_S4_>
 8002188:	4603      	mov	r3, r0
	}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}

08002192 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKP12GPIO_TypeDefbELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800219e:	68b8      	ldr	r0, [r7, #8]
 80021a0:	f000 f935 	bl	800240e <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe fdf5 	bl	8000d9c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80021b2:	4603      	mov	r3, r0
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	711a      	strb	r2, [r3, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_hash_code_trIS2_EEjRKT_>:
	_M_hash_code_tr(const _Kt& __k) const
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	  return _M_hash()(__k);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff f830 	bl	8001234 <_ZNKSt8__detail15_Hash_code_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 80021d4:	4602      	mov	r2, r0
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f7ff f835 	bl	800124c <_ZNKSt4hashIP12GPIO_TypeDefEclES1_>
 80021e2:	4603      	mov	r3, r0
	}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS6_10_Hash_nodeIS4_Lb0EEEjRKT_j>:
	_M_find_node_tr(size_type __bkt, const _Kt& __key,
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
	  auto __before_n = _M_find_before_node_tr(__bkt, __key, __c);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f90e 	bl	8002422 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j>
 8002206:	6178      	str	r0, [r7, #20]
	  if (__before_n)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS6_10_Hash_nodeIS4_Lb0EEEjRKT_j+0x28>
	    return static_cast<__node_ptr>(__before_n->_M_nxt);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e000      	b.n	8002216 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_find_node_trIS1_EEPNS6_10_Hash_nodeIS4_Lb0EEEjRKT_j+0x2a>
	  return nullptr;
 8002214:	2300      	movs	r3, #0
	}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKP12GPIO_TypeDefbELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800222a:	68b8      	ldr	r0, [r7, #8]
 800222c:	f000 f93e 	bl	80024ac <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fdaf 	bl	8000d9c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800223e:	4603      	mov	r3, r0
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	711a      	strb	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <_ZNSt8__detail12_NodeBuilderINS_10_Select1stEE8_S_buildIRKP12GPIO_TypeDefRKSt4pairIS6_bENS_10_AllocNodeISaINS_10_Hash_nodeIS9_Lb0EEEEEEEEPNT1_11__node_typeEOT_OT0_RKSH_>:
	_S_build(_Kt&& __k, _Arg&& __arg, const _NodeGenerator& __node_gen)
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	  return __node_gen(std::forward<_Kt>(__k),
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff ffed 	bl	8002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002276:	4604      	mov	r4, r0
			    std::forward<_Arg>(__arg).second);
 8002278:	68b8      	ldr	r0, [r7, #8]
 800227a:	f7ff fd56 	bl	8001d2a <_ZSt7forwardIRKSt4pairIKP12GPIO_TypeDefbEEOT_RNSt16remove_referenceIS7_E4typeE>
 800227e:	4603      	mov	r3, r0
 8002280:	3304      	adds	r3, #4
	  return __node_gen(std::forward<_Kt>(__k),
 8002282:	461a      	mov	r2, r3
 8002284:	4621      	mov	r1, r4
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f91a 	bl	80024c0 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEclIJRS5_RKbEEEPS7_DpOT_>
 800228c:	4603      	mov	r3, r0
	}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}

08002296 <_ZNSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1EPNS6_10_Hash_nodeIS4_Lb0EEEPNS6_16_Hashtable_allocISaISK_EEE>:
	_Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
	: _M_h(__h), _M_node(__n) { }
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIP12GPIO_TypeDefELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>:
      _M_valptr() const noexcept
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f901 	bl	80024f4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE6_M_ptrEv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_ZNSt4pairIKP12GPIO_TypeDefbEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800230a:	68b8      	ldr	r0, [r7, #8]
 800230c:	f000 f8fe 	bl	800250c <_ZSt3getILj0EJRKP12GPIO_TypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002310:	4603      	mov	r3, r0
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff9c 	bl	8002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002318:	4603      	mov	r3, r0
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	711a      	strb	r2, [r3, #4]
      { }
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEPT_RS8_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIP12GPIO_TypeDefELb1EEC1IRKS4_EEOT_>:
	_Hashtable_ebo_helper(_OtherTp&& __tp)
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
	: _Tp(std::forward<_OtherTp>(__tp))
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f000 f8e9 	bl	8002526 <_ZSt7forwardIRKSt4hashIP12GPIO_TypeDefEEOT_RNSt16remove_referenceIS6_E4typeE>
	{ }
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZSt7forwardIRKSt8equal_toIP12GPIO_TypeDefEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f8db 	bl	800253a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1ERKS8_>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f8d8 	bl	8002550 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf8c      	ite	hi
 80023a8:	2301      	movhi	r3, #1
 80023aa:	2300      	movls	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c2:	d301      	bcc.n	80023c8 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80023c4:	f000 fdc6 	bl	8002f54 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80023c8:	f000 fdc1 	bl	8002f4e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fdab 	bl	8002f2c <_Znwj>
 80023d6:	4603      	mov	r3, r0
      }
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_ZNSt8__detail22_Hashtable_hash_traitsISt4hashIP12GPIO_TypeDefEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 80023e4:	2300      	movs	r3, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <_ZNSt8__detail19_Node_iterator_baseISt4pairIKP12GPIO_TypeDefbELb0EE7_M_incrEv>:
      _M_incr() noexcept
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f8ec 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 8002400:	4602      	mov	r2, r0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	603b      	str	r3, [r7, #0]
	__node_base_ptr __prev_p = _M_buckets[__bkt];
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	617b      	str	r3, [r7, #20]
	if (!__prev_p)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x26>
	  return nullptr;
 8002444:	2300      	movs	r3, #0
 8002446:	e02d      	b.n	80024a4 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x82>
	for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	613b      	str	r3, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	3304      	adds	r3, #4
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f885 	bl	8002566 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS5_Lb0EEE>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x44>
	      return __prev_p;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	e01e      	b.n	80024a4 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x82>
	    if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00c      	beq.n	8002488 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x66>
 800246e:	6938      	ldr	r0, [r7, #16]
 8002470:	f7ff f8b2 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 8002474:	4603      	mov	r3, r0
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff f918 	bl	80016b0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4293      	cmp	r3, r2
 8002486:	d001      	beq.n	800248c <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x6a>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x6c>
 800248c:	2300      	movs	r3, #0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x7e>
	    __prev_p = __p;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	617b      	str	r3, [r7, #20]
	     __p = __p->_M_next())
 8002496:	6938      	ldr	r0, [r7, #16]
 8002498:	f7ff f89e 	bl	80015d8 <_ZNKSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EE7_M_nextEv>
 800249c:	6138      	str	r0, [r7, #16]
	    if (this->_M_equals_tr(__k, __code, *__p))
 800249e:	e7d6      	b.n	800244e <_ZNKSt10_HashtableIP12GPIO_TypeDefSt4pairIKS1_bESaIS4_ENSt8__detail10_Select1stESt8equal_toIS1_ESt4hashIS1_ENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_find_before_node_trIS1_EEPNS6_15_Hash_node_baseEjRKT_j+0x2c>
	      break;
 80024a0:	bf00      	nop
	return nullptr;
 80024a2:	2300      	movs	r3, #0
      }
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKP12GPIO_TypeDefbELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEEclIJRS5_RKbEEEPS7_DpOT_>:
	operator()(_Args&&... __args) const
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	{ return _M_h._M_allocate_node(std::forward<_Args>(__args)...); }
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681c      	ldr	r4, [r3, #0]
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f7ff febd 	bl	8002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80024d6:	4605      	mov	r5, r0
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f861 	bl	80025a0 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	4629      	mov	r1, r5
 80024e4:	4620      	mov	r0, r4
 80024e6:	f000 f865 	bl	80025b4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE16_M_allocate_nodeIJRS5_RKbEEEPS7_DpOT_>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}

080024f4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f891 	bl	8002624 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE7_M_addrEv>
 8002502:	4603      	mov	r3, r0
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZSt3getILj0EJRKP12GPIO_TypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f88e 	bl	8002638 <_ZSt12__get_helperILj0ERKP12GPIO_TypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800251c:	4603      	mov	r3, r0
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <_ZSt7forwardIRKSt4hashIP12GPIO_TypeDefEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEC1ERKS8_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002558:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS5_Lb0EEE>:
	_M_equals_tr(const _Kt& __k, __hash_code __c,
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
	{ return _S_equals(__c, __n) && _M_key_equals_tr(__k, __n); }
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fa7c 	bl	8001a74 <_ZNSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x30>
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f7ff fde3 	bl	8002152 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE16_M_key_equals_trIS2_EEbRKT_RKNS_16_Hash_node_valueIS5_Lb0EEE>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x30>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <_ZNKSt8__detail15_Hashtable_baseIP12GPIO_TypeDefSt4pairIKS2_bENS_10_Select1stESt8equal_toIS2_ESt4hashIS2_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_equals_trIS2_EEbRKT_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x32>
 8002596:	2300      	movs	r3, #0
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE16_M_allocate_nodeIJRS5_RKbEEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff f8a0 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f8a7 	bl	800171e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE8allocateERS8_j>
 80025d0:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 80025d2:	6978      	ldr	r0, [r7, #20]
 80025d4:	f7ff f8b2 	bl	800173c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEPT_S9_>
 80025d8:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4619      	mov	r1, r3
 80025de:	200c      	movs	r0, #12
 80025e0:	f7fe fad0 	bl	8000b84 <_ZnwjPv>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fecc 	bl	8001384 <_ZNSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff f88a 	bl	8001706 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE17_M_node_allocatorEv>
 80025f2:	4604      	mov	r4, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	3304      	adds	r3, #4
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fe89 	bl	8001310 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKP12GPIO_TypeDefbEE9_M_valptrEv>
 80025fe:	4605      	mov	r5, r0
 8002600:	68b8      	ldr	r0, [r7, #8]
 8002602:	f7ff fe25 	bl	8002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002606:	4606      	mov	r6, r0
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ffc9 	bl	80025a0 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800260e:	4603      	mov	r3, r0
 8002610:	4632      	mov	r2, r6
 8002612:	4629      	mov	r1, r5
 8002614:	4620      	mov	r0, r4
 8002616:	f000 f81b 	bl	8002650 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE9constructIS6_JRS5_RKbEEEvRS8_PT_DpOT0_>
	    return __n;
 800261a:	693b      	ldr	r3, [r7, #16]
      }
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002624 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKP12GPIO_TypeDefbEE7_M_addrEv>:
      _M_addr() const noexcept
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800262c:	687b      	ldr	r3, [r7, #4]
      }
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <_ZSt12__get_helperILj0ERKP12GPIO_TypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f81d 	bl	8002680 <_ZNSt11_Tuple_implILj0EJRKP12GPIO_TypeDefEE7_M_headERS4_>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEEE9constructIS6_JRS5_RKbEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fdf6 	bl	8002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002664:	4604      	mov	r4, r0
 8002666:	6838      	ldr	r0, [r7, #0]
 8002668:	f7ff ff9a 	bl	80025a0 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 800266c:	4603      	mov	r3, r0
 800266e:	4622      	mov	r2, r4
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f811 	bl	800269a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE9constructIS6_JRS5_RKbEEEvPT_DpOT0_>
	}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}

08002680 <_ZNSt11_Tuple_implILj0EJRKP12GPIO_TypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f823 	bl	80026d6 <_ZNSt10_Head_baseILj0ERKP12GPIO_TypeDefLb0EE7_M_headERS4_>
 8002690:	4603      	mov	r3, r0
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIKP12GPIO_TypeDefbELb0EEEE9constructIS6_JRS5_RKbEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800269a:	b5b0      	push	{r4, r5, r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
 80026a6:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4619      	mov	r1, r3
 80026ac:	2008      	movs	r0, #8
 80026ae:	f7fe fa69 	bl	8000b84 <_ZnwjPv>
 80026b2:	4604      	mov	r4, r0
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fdcb 	bl	8002250 <_ZSt7forwardIRKP12GPIO_TypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 80026ba:	4605      	mov	r5, r0
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f7ff ff6f 	bl	80025a0 <_ZSt7forwardIRKbEOT_RNSt16remove_referenceIS2_E4typeE>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4629      	mov	r1, r5
 80026c8:	4620      	mov	r0, r4
 80026ca:	f000 f80f 	bl	80026ec <_ZNSt4pairIKP12GPIO_TypeDefbEC1IS2_bLb1EEERS2_RKb>
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}

080026d6 <_ZNSt10_Head_baseILj0ERKP12GPIO_TypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <_ZNSt4pairIKP12GPIO_TypeDefbEC1IS2_bLb1EEERS2_RKb>:
      constexpr pair(const _T1& __a, const _T2& __b)
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	711a      	strb	r2, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <_Z41__static_initialization_and_destruction_0ii>:

std::unordered_map<GPIO_TypeDef*, bool> GPIO_Base::output_init = {
    {GPIOA, false},
    {GPIOB, false},
    {GPIOC, false}
};
 8002714:	b580      	push	{r7, lr}
 8002716:	b098      	sub	sp, #96	@ 0x60
 8002718:	af04      	add	r7, sp, #16
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d14f      	bne.n	80027c4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800272a:	4293      	cmp	r3, r2
 800272c:	d14a      	bne.n	80027c4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
    {GPIOA, false},
 800272e:	4b2d      	ldr	r3, [pc, #180]	@ (80027e4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
std::unordered_map<GPIO_TypeDef*, bool> GPIO_Base::output_init = {
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002738:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 800273c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fab5 	bl	8000cb4 <_ZNSt4pairIKP12GPIO_TypeDefbEC1IS1_bLb1EEEOT_OT0_>
    {GPIOB, false},
 800274a:	4b27      	ldr	r3, [pc, #156]	@ (80027e8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800274c:	637b      	str	r3, [r7, #52]	@ 0x34
std::unordered_map<GPIO_TypeDef*, bool> GPIO_Base::output_init = {
 800274e:	2300      	movs	r3, #0
 8002750:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002754:	f107 023b 	add.w	r2, r7, #59	@ 0x3b
 8002758:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	3308      	adds	r3, #8
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe faa6 	bl	8000cb4 <_ZNSt4pairIKP12GPIO_TypeDefbEC1IS1_bLb1EEEOT_OT0_>
    {GPIOC, false}
 8002768:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800276a:	63fb      	str	r3, [r7, #60]	@ 0x3c
std::unordered_map<GPIO_TypeDef*, bool> GPIO_Base::output_init = {
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002772:	f107 0243 	add.w	r2, r7, #67	@ 0x43
 8002776:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	3310      	adds	r3, #16
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fa97 	bl	8000cb4 <_ZNSt4pairIKP12GPIO_TypeDefbEC1IS1_bLb1EEEOT_OT0_>
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	2303      	movs	r3, #3
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe faa6 	bl	8000ce6 <_ZNSaISt4pairIKP12GPIO_TypeDefbEEC1Ev>
 800279a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800279e:	9302      	str	r3, [sp, #8]
 80027a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2300      	movs	r3, #0
 80027ae:	f107 020c 	add.w	r2, r7, #12
 80027b2:	ca06      	ldmia	r2, {r1, r2}
 80027b4:	480e      	ldr	r0, [pc, #56]	@ (80027f0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80027b6:	f7fe faae 	bl	8000d16 <_ZNSt13unordered_mapIP12GPIO_TypeDefbSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_bEEEC1ESt16initializer_listIS8_EjRKS3_RKS5_RKS9_>
 80027ba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fa9d 	bl	8000cfe <_ZNSaISt4pairIKP12GPIO_TypeDefbEED1Ev>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <_Z41__static_initialization_and_destruction_0ii+0xc6>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d102      	bne.n	80027da <_Z41__static_initialization_and_destruction_0ii+0xc6>
 80027d4:	4806      	ldr	r0, [pc, #24]	@ (80027f0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80027d6:	f7fe fa51 	bl	8000c7c <_ZNSt13unordered_mapIP12GPIO_TypeDefbSt4hashIS1_ESt8equal_toIS1_ESaISt4pairIKS1_bEEED1Ev>
};
 80027da:	bf00      	nop
 80027dc:	3750      	adds	r7, #80	@ 0x50
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40010800 	.word	0x40010800
 80027e8:	40010c00 	.word	0x40010c00
 80027ec:	40011000 	.word	0x40011000
 80027f0:	200000e0 	.word	0x200000e0

080027f4 <_GLOBAL__sub_I__ZN9GPIO_BaseC2EP12GPIO_TypeDefh>:
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff ff89 	bl	8002714 <_Z41__static_initialization_and_destruction_0ii>
 8002802:	bd80      	pop	{r7, pc}

08002804 <_GLOBAL__sub_D__ZN9GPIO_BaseC2EP12GPIO_TypeDefh>:
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
 8002808:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff ff81 	bl	8002714 <_Z41__static_initialization_and_destruction_0ii>
 8002812:	bd80      	pop	{r7, pc}

08002814 <_ZN5InputC1EP12GPIO_TypeDefh11INPUT_MODES>:
 */

#include "GPIO/Input.h"


Input::Input(GPIO_TypeDef * GPIO, uint8_t pin, INPUT_MODES MODE_P):GPIO_Base(GPIO, pin), MODE(static_cast<uint32_t>(MODE_P))
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	71fb      	strb	r3, [r7, #7]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	79fa      	ldrb	r2, [r7, #7]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe f9f2 	bl	8000c14 <_ZN9GPIO_BaseC1EP12GPIO_TypeDefh>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	609a      	str	r2, [r3, #8]
{
	if(pin_ < GPIO_CONSTS::NUM_BIT_PAR_REG)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	791b      	ldrb	r3, [r3, #4]
 800283a:	2b07      	cmp	r3, #7
 800283c:	d80d      	bhi.n	800285a <_ZN5InputC1EP12GPIO_TypeDefh11INPUT_MODES+0x46>
	{
		port_->CRL |= (MODE << (pin_ * GPIO_CONSTS::BITS_PAR_PIN));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	791b      	ldrb	r3, [r3, #4]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e00f      	b.n	800287a <_ZN5InputC1EP12GPIO_TypeDefh11INPUT_MODES+0x66>
	}
	else
	{
		port_->CRH |= ((MODE << ((pin_ * GPIO_CONSTS::BITS_PAR_PIN) - GPIO_CONSTS::BITS_PAR_REG)));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	791b      	ldrb	r3, [r3, #4]
 8002868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800286c:	3b08      	subs	r3, #8
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
	}

}
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_ZN5InputD1Ev>:
bool Input::GetStatus()
{
	return (port_->IDR >> pin_) & 1;
}

Input::~Input()
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
{

}
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <_ZN6OutputC1EP12GPIO_TypeDefh12OUTPUT_MODES>:
 */

#include "GPIO/Output.h"


Output::Output(GPIO_TypeDef * GPIO, uint8_t pin, OUTPUT_MODES MODE_P):GPIO_Base(GPIO, pin), MODE(static_cast<uint32_t>(MODE_P))
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71fb      	strb	r3, [r7, #7]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	79fa      	ldrb	r2, [r7, #7]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe f9b0 	bl	8000c14 <_ZN9GPIO_BaseC1EP12GPIO_TypeDefh>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	609a      	str	r2, [r3, #8]
{
	if(pin_ < GPIO_CONSTS::NUM_BIT_PAR_REG)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	791b      	ldrb	r3, [r3, #4]
 80028be:	2b07      	cmp	r3, #7
 80028c0:	d80d      	bhi.n	80028de <_ZN6OutputC1EP12GPIO_TypeDefh12OUTPUT_MODES+0x46>
	{
		port_->CRL |= (MODE << (pin_ * GPIO_CONSTS::BITS_PAR_PIN));
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e00f      	b.n	80028fe <_ZN6OutputC1EP12GPIO_TypeDefh12OUTPUT_MODES+0x66>
	}
	else
	{
		port_->CRH |= (MODE << ((pin_ * GPIO_CONSTS::BITS_PAR_PIN) - GPIO_CONSTS::BITS_PAR_REG));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	791b      	ldrb	r3, [r3, #4]
 80028ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028f0:	3b08      	subs	r3, #8
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	409a      	lsls	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
	}
	Off();
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f827 	bl	8002952 <_ZN6Output3OffEv>
}
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_ZN6OutputD1Ev>:

Output::~Output()
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
{
	Off();
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f81b 	bl	8002952 <_ZN6Output3OffEv>
}
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZN6Output2OnEv>:

void Output::On()
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
	port_->ODR |= (1 << pin_);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	791b      	ldrb	r3, [r3, #4]
 8002938:	4619      	mov	r1, r3
 800293a:	2301      	movs	r3, #1
 800293c:	408b      	lsls	r3, r1
 800293e:	4619      	mov	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <_ZN6Output3OffEv>:
void Output::Off()
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
	port_->ODR &= ~(1 << pin_);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	791b      	ldrb	r3, [r3, #4]
 8002964:	4619      	mov	r1, r3
 8002966:	2301      	movs	r3, #1
 8002968:	408b      	lsls	r3, r1
 800296a:	43db      	mvns	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	400a      	ands	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <_ZN5MotorC1E9Motor_bin>:
 *      Author: roboticscorner
 */

#include "Motor/Motor.h"

Motor::Motor(Motor_bin Motor_bins)
 8002980:	b084      	sub	sp, #16
 8002982:	b590      	push	{r4, r7, lr}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	f107 001c 	add.w	r0, r7, #28
 800298e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
{
	this->Enable = new Output(Motor_bins.Enable_GPIO, Motor_bins.Enbale_bin, Motor_bins.Outputmode);
 8002992:	200c      	movs	r0, #12
 8002994:	f000 faca 	bl	8002f2c <_Znwj>
 8002998:	4603      	mov	r3, r0
 800299a:	461c      	mov	r4, r3
 800299c:	69f9      	ldr	r1, [r7, #28]
 800299e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7ff ff77 	bl	8002898 <_ZN6OutputC1EP12GPIO_TypeDefh12OUTPUT_MODES>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601c      	str	r4, [r3, #0]
	this->In1 = new Output(Motor_bins.Int1_GPIO, Motor_bins.Int1_bin, Motor_bins.Outputmode);
 80029ae:	200c      	movs	r0, #12
 80029b0:	f000 fabc 	bl	8002f2c <_Znwj>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461c      	mov	r4, r3
 80029b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ba:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff ff69 	bl	8002898 <_ZN6OutputC1EP12GPIO_TypeDefh12OUTPUT_MODES>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	605c      	str	r4, [r3, #4]
	this->In2 = new Output(Motor_bins.Int2_GPIO, Motor_bins.Int2_bin, Motor_bins.Outputmode);
 80029ca:	200c      	movs	r0, #12
 80029cc:	f000 faae 	bl	8002f2c <_Znwj>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461c      	mov	r4, r3
 80029d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029d6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80029da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff ff5b 	bl	8002898 <_ZN6OutputC1EP12GPIO_TypeDefh12OUTPUT_MODES>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	609c      	str	r4, [r3, #8]
}
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80029f2:	b004      	add	sp, #16
 80029f4:	4770      	bx	lr

080029f6 <_ZN5Motor13MoveClockwiseEv>:

void Motor::MoveClockwise()
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
	Enable->On();
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff8f 	bl	8002926 <_ZN6Output2OnEv>
	In1->On();
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff8a 	bl	8002926 <_ZN6Output2OnEv>
	In2->Off();
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff9b 	bl	8002952 <_ZN6Output3OffEv>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZN5Motor17MoveAntiClockwiseEv>:

void Motor::MoveAntiClockwise()
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	Enable->On();
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff78 	bl	8002926 <_ZN6Output2OnEv>
	In1->Off();
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff89 	bl	8002952 <_ZN6Output3OffEv>
	In2->On();
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff6e 	bl	8002926 <_ZN6Output2OnEv>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_ZN5Motor4StopEv>:

void Motor::Stop()
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
	Enable->Off();
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff77 	bl	8002952 <_ZN6Output3OffEv>
	In1->Off();
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff72 	bl	8002952 <_ZN6Output3OffEv>
	In2->Off();
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff6d 	bl	8002952 <_ZN6Output3OffEv>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_Z22Enable_APB2_Peripheral12PeripheralID>:

#include "RCC_Peripheral_Enable/RCC_Peripheral_Enable.h"
#include "main.h"

void Enable_APB2_Peripheral(PeripheralID PerID)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
	RCC->APB2ENR |= (1 << PerID);
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <_Z22Enable_APB2_Peripheral12PeripheralID+0x28>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	79fa      	ldrb	r2, [r7, #7]
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4611      	mov	r1, r2
 8002a98:	4a03      	ldr	r2, [pc, #12]	@ (8002aa8 <_Z22Enable_APB2_Peripheral12PeripheralID+0x28>)
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	6193      	str	r3, [r2, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000

08002aac <_ZN5RobotC1ER5MotorS1_S1_S1_>:
 *  Created on: Dec 22, 2024
 *      Author: roboticscorner
 */
#include "Robot/Robot.h"

Robot::Robot(Motor& Front_Left_motor, Motor& Back_Left_motor, Motor& Front_Right_motor, Motor& Back_Right_motor)
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
{
	this->Front_Left_motor = &Front_Left_motor;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	601a      	str	r2, [r3, #0]
	this->Back_Left_motor = &Back_Left_motor;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	605a      	str	r2, [r3, #4]
	this->Front_Right_motor = &Front_Right_motor;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	609a      	str	r2, [r3, #8]
	this->Back_Right_motor = &Back_Right_motor;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	60da      	str	r2, [r3, #12]
}
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <_ZN5Robot11moveForwardEv>:

void Robot::moveForward()
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
	this->Front_Left_motor->MoveAntiClockwise();
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff9a 	bl	8002a24 <_ZN5Motor17MoveAntiClockwiseEv>
	this->Back_Left_motor->MoveAntiClockwise();
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff95 	bl	8002a24 <_ZN5Motor17MoveAntiClockwiseEv>

	this->Front_Right_motor->MoveClockwise();
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff79 	bl	80029f6 <_ZN5Motor13MoveClockwiseEv>
	this->Back_Right_motor->MoveClockwise();
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff74 	bl	80029f6 <_ZN5Motor13MoveClockwiseEv>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_ZN5Robot12moveBackwardEv>:

void Robot::moveBackward()
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	this->Front_Left_motor->MoveClockwise();
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff67 	bl	80029f6 <_ZN5Motor13MoveClockwiseEv>
	this->Back_Left_motor->MoveClockwise();
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff62 	bl	80029f6 <_ZN5Motor13MoveClockwiseEv>

	this->Front_Right_motor->MoveAntiClockwise();
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff74 	bl	8002a24 <_ZN5Motor17MoveAntiClockwiseEv>
	this->Back_Right_motor->MoveAntiClockwise();
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff6f 	bl	8002a24 <_ZN5Motor17MoveAntiClockwiseEv>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZN5Robot8turnLeftEv>:

void Robot::turnLeft()
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	this->Front_Left_motor->Stop();
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff79 	bl	8002a52 <_ZN5Motor4StopEv>
	this->Back_Left_motor->Stop();
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff74 	bl	8002a52 <_ZN5Motor4StopEv>

	this->Front_Right_motor->MoveClockwise();
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff41 	bl	80029f6 <_ZN5Motor13MoveClockwiseEv>
	this->Back_Right_motor->MoveClockwise();
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff3c 	bl	80029f6 <_ZN5Motor13MoveClockwiseEv>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_ZN5Robot9turnRightEv>:

void Robot::turnRight()
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
	this->Front_Left_motor->MoveAntiClockwise();
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff46 	bl	8002a24 <_ZN5Motor17MoveAntiClockwiseEv>
	this->Back_Left_motor->MoveAntiClockwise();
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff41 	bl	8002a24 <_ZN5Motor17MoveAntiClockwiseEv>

	this->Front_Right_motor->Stop();
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff53 	bl	8002a52 <_ZN5Motor4StopEv>
	this->Back_Right_motor->Stop();
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff4e 	bl	8002a52 <_ZN5Motor4StopEv>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_ZN5Robot4StopEv>:

void Robot::Stop()
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
	this->Front_Left_motor->Stop();
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff41 	bl	8002a52 <_ZN5Motor4StopEv>
	this->Back_Left_motor->Stop();
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff3c 	bl	8002a52 <_ZN5Motor4StopEv>

	this->Front_Right_motor->Stop();
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff37 	bl	8002a52 <_ZN5Motor4StopEv>
	this->Back_Right_motor->Stop();
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff32 	bl	8002a52 <_ZN5Motor4StopEv>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <_Z9DelayInitv>:

void SysTick_Init();
void SysTick_Handler();

void DelayInit()
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
	SysTick_Init();
 8002bfa:	f000 f81d 	bl	8002c38 <_Z12SysTick_Initv>
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <_Z5Delaym>:


void Delay(uint32_t ms_delay)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	Ticks = ms_delay;
 8002c0c:	4a09      	ldr	r2, [pc, #36]	@ (8002c34 <_Z5Delaym+0x30>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
	while(Ticks);
 8002c12:	bf00      	nop
 8002c14:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <_Z5Delaym+0x30>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f6      	bne.n	8002c14 <_Z5Delaym+0x10>
}
 8002c26:	bf00      	nop
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	200000fc 	.word	0x200000fc

08002c38 <_Z12SysTick_Initv>:
		Ticks--;
	}
}

void SysTick_Init()
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
	SysTick->LOAD = (OSC / Milis_In_Sec)-1;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <_Z12SysTick_Initv+0x20>)
 8002c3e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002c42:	605a      	str	r2, [r3, #4]

	SysTick->VAL = 0;
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <_Z12SysTick_Initv+0x20>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8002c4a:	4b03      	ldr	r3, [pc, #12]	@ (8002c58 <_Z12SysTick_Initv+0x20>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]

}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	e000e010 	.word	0xe000e010

08002c5c <main>:
extern Motor_bin Front_Right_motor_bins;
extern Motor_bin Back_Right_motor_bins;


int main()
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b097      	sub	sp, #92	@ 0x5c
 8002c60:	af04      	add	r7, sp, #16
	//Enable clock gating for GPIOA, GPIOB and UART1
	Enable_APB2_Peripheral(GPIOA_ID);
 8002c62:	2002      	movs	r0, #2
 8002c64:	f7ff ff0c 	bl	8002a80 <_Z22Enable_APB2_Peripheral12PeripheralID>
	Enable_APB2_Peripheral(GPIOB_ID);
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f7ff ff09 	bl	8002a80 <_Z22Enable_APB2_Peripheral12PeripheralID>
	Enable_APB2_Peripheral(UART1_ID);
 8002c6e:	200e      	movs	r0, #14
 8002c70:	f7ff ff06 	bl	8002a80 <_Z22Enable_APB2_Peripheral12PeripheralID>

	Uart* blu = new (Usart1Instance) Uart(9600);
 8002c74:	4946      	ldr	r1, [pc, #280]	@ (8002d90 <main+0x134>)
 8002c76:	201c      	movs	r0, #28
 8002c78:	f7fd fef4 	bl	8000a64 <_ZN4UartnwEj13UsartInstance>
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7fd feda 	bl	8000a3c <_ZN4UartC1Em>
 8002c88:	647c      	str	r4, [r7, #68]	@ 0x44


	// Initializing the motors with the specific bins
	Motor Front_Left_motor(Front_Left_motor_bins);
 8002c8a:	4c42      	ldr	r4, [pc, #264]	@ (8002d94 <main+0x138>)
 8002c8c:	f107 0634 	add.w	r6, r7, #52	@ 0x34
 8002c90:	466d      	mov	r5, sp
 8002c92:	f104 030c 	add.w	r3, r4, #12
 8002c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f7ff fe6d 	bl	8002980 <_ZN5MotorC1E9Motor_bin>
	Motor Back_Left_motor(Back_Left_motor_bins);
 8002ca6:	4c3c      	ldr	r4, [pc, #240]	@ (8002d98 <main+0x13c>)
 8002ca8:	f107 0628 	add.w	r6, r7, #40	@ 0x28
 8002cac:	466d      	mov	r5, sp
 8002cae:	f104 030c 	add.w	r3, r4, #12
 8002cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cb8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	f7ff fe5f 	bl	8002980 <_ZN5MotorC1E9Motor_bin>
	Motor Front_Right_motor(Front_Right_motor_bins);
 8002cc2:	4c36      	ldr	r4, [pc, #216]	@ (8002d9c <main+0x140>)
 8002cc4:	f107 061c 	add.w	r6, r7, #28
 8002cc8:	466d      	mov	r5, sp
 8002cca:	f104 030c 	add.w	r3, r4, #12
 8002cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cd4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f7ff fe51 	bl	8002980 <_ZN5MotorC1E9Motor_bin>
	Motor Back_Right_motor(Back_Right_motor_bins);
 8002cde:	4c30      	ldr	r4, [pc, #192]	@ (8002da0 <main+0x144>)
 8002ce0:	f107 0610 	add.w	r6, r7, #16
 8002ce4:	466d      	mov	r5, sp
 8002ce6:	f104 030c 	add.w	r3, r4, #12
 8002cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cf0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f7ff fe43 	bl	8002980 <_ZN5MotorC1E9Motor_bin>

	// Initializing the car
	Robot My_car(Front_Left_motor, Back_Left_motor,
				 Front_Right_motor, Back_Right_motor);
 8002cfa:	f107 041c 	add.w	r4, r7, #28
 8002cfe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002d02:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002d06:	4638      	mov	r0, r7
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4623      	mov	r3, r4
 8002d10:	f7ff fecc 	bl	8002aac <_ZN5RobotC1ER5MotorS1_S1_S1_>

	DelayInit();
 8002d14:	f7ff ff6f 	bl	8002bf6 <_Z9DelayInitv>
	while(1)
	{

		char ch = blu->UartRead();
 8002d18:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002d1a:	f7fd ff19 	bl	8000b50 <_ZN4Uart8UartReadEv>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if(ch == 'F')
 8002d24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d28:	2b46      	cmp	r3, #70	@ 0x46
 8002d2a:	d108      	bne.n	8002d3e <main+0xe2>
		{
			Delay(5000);
 8002d2c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002d30:	f7ff ff68 	bl	8002c04 <_Z5Delaym>
			My_car.moveForward();
 8002d34:	463b      	mov	r3, r7
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fed1 	bl	8002ade <_ZN5Robot11moveForwardEv>
 8002d3c:	e7ec      	b.n	8002d18 <main+0xbc>
		}
		else if(ch == 'S' || ch == 'C')
 8002d3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d42:	2b53      	cmp	r3, #83	@ 0x53
 8002d44:	d003      	beq.n	8002d4e <main+0xf2>
 8002d46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d4a:	2b43      	cmp	r3, #67	@ 0x43
 8002d4c:	d104      	bne.n	8002d58 <main+0xfc>
		{
			My_car.Stop();
 8002d4e:	463b      	mov	r3, r7
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff34 	bl	8002bbe <_ZN5Robot4StopEv>
 8002d56:	e019      	b.n	8002d8c <main+0x130>
		}
		else if(ch == 'B')
 8002d58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d5c:	2b42      	cmp	r3, #66	@ 0x42
 8002d5e:	d104      	bne.n	8002d6a <main+0x10e>
		{
			My_car.moveBackward();
 8002d60:	463b      	mov	r3, r7
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fed7 	bl	8002b16 <_ZN5Robot12moveBackwardEv>
 8002d68:	e7d6      	b.n	8002d18 <main+0xbc>
		}
		else if(ch == 'L')
 8002d6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d6e:	2b4c      	cmp	r3, #76	@ 0x4c
 8002d70:	d104      	bne.n	8002d7c <main+0x120>
		{
			My_car.turnLeft();
 8002d72:	463b      	mov	r3, r7
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff feea 	bl	8002b4e <_ZN5Robot8turnLeftEv>
 8002d7a:	e7cd      	b.n	8002d18 <main+0xbc>
		}
		else if(ch == 'R')
 8002d7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d80:	2b52      	cmp	r3, #82	@ 0x52
 8002d82:	d1c9      	bne.n	8002d18 <main+0xbc>
		{
			My_car.turnRight();
 8002d84:	463b      	mov	r3, r7
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fefd 	bl	8002b86 <_ZN5Robot9turnRightEv>
		}




	}
 8002d8c:	e7c4      	b.n	8002d18 <main+0xbc>
 8002d8e:	bf00      	nop
 8002d90:	40013800 	.word	0x40013800
 8002d94:	20000000 	.word	0x20000000
 8002d98:	2000001c 	.word	0x2000001c
 8002d9c:	20000038 	.word	0x20000038
 8002da0:	20000054 	.word	0x20000054

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <NMI_Handler+0x4>

08002dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <MemManage_Handler+0x4>

08002dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df4:	f000 f886 	bl	8002f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return 1;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <_kill>:

int _kill(int pid, int sig)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e14:	f000 fae6 	bl	80033e4 <__errno>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2216      	movs	r2, #22
 8002e1c:	601a      	str	r2, [r3, #0]
  return -1;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_exit>:

void _exit (int status)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e32:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffe7 	bl	8002e0a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <_exit+0x12>

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	@ (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f000 fab8 	bl	80033e4 <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	@ (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20005000 	.word	0x20005000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	20000100 	.word	0x20000100
 8002ea8:	20000258 	.word	0x20000258

08002eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb8:	f7ff fff8 	bl	8002eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ebc:	480b      	ldr	r0, [pc, #44]	@ (8002eec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ebe:	490c      	ldr	r1, [pc, #48]	@ (8002ef0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec4:	e002      	b.n	8002ecc <LoopCopyDataInit>

08002ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eca:	3304      	adds	r3, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed0:	d3f9      	bcc.n	8002ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ed4:	4c09      	ldr	r4, [pc, #36]	@ (8002efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed8:	e001      	b.n	8002ede <LoopFillZerobss>

08002eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002edc:	3204      	adds	r2, #4

08002ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee0:	d3fb      	bcc.n	8002eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f000 fa85 	bl	80033f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ee6:	f7ff feb9 	bl	8002c5c <main>
  bx lr
 8002eea:	4770      	bx	lr
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002ef4:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 8002ef8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002efc:	20000254 	.word	0x20000254

08002f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC1_2_IRQHandler>
	...

08002f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_IncTick+0x1c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_IncTick+0x20>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a03      	ldr	r2, [pc, #12]	@ (8002f24 <HAL_IncTick+0x20>)
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	20000070 	.word	0x20000070
 8002f24:	20000104 	.word	0x20000104

08002f28 <_ZdlPvj>:
 8002f28:	f000 b8b0 	b.w	800308c <_ZdlPv>

08002f2c <_Znwj>:
 8002f2c:	2801      	cmp	r0, #1
 8002f2e:	bf38      	it	cc
 8002f30:	2001      	movcc	r0, #1
 8002f32:	b510      	push	{r4, lr}
 8002f34:	4604      	mov	r4, r0
 8002f36:	4620      	mov	r0, r4
 8002f38:	f000 f93a 	bl	80031b0 <malloc>
 8002f3c:	b100      	cbz	r0, 8002f40 <_Znwj+0x14>
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	f000 f8a6 	bl	8003090 <_ZSt15get_new_handlerv>
 8002f44:	b908      	cbnz	r0, 8002f4a <_Znwj+0x1e>
 8002f46:	f000 f92b 	bl	80031a0 <abort>
 8002f4a:	4780      	blx	r0
 8002f4c:	e7f3      	b.n	8002f36 <_Znwj+0xa>

08002f4e <_ZSt17__throw_bad_allocv>:
 8002f4e:	b508      	push	{r3, lr}
 8002f50:	f000 f926 	bl	80031a0 <abort>

08002f54 <_ZSt28__throw_bad_array_new_lengthv>:
 8002f54:	b508      	push	{r3, lr}
 8002f56:	f000 f923 	bl	80031a0 <abort>
	...

08002f5c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8002f5c:	290d      	cmp	r1, #13
 8002f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f60:	4605      	mov	r5, r0
 8002f62:	d82b      	bhi.n	8002fbc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x60>
 8002f64:	b391      	cbz	r1, 8002fcc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x70>
 8002f66:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x74>)
 8002f68:	5c5c      	ldrb	r4, [r3, r1]
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7fd fa42 	bl	80003f4 <__aeabi_i2d>
 8002f70:	4606      	mov	r6, r0
 8002f72:	6828      	ldr	r0, [r5, #0]
 8002f74:	460f      	mov	r7, r1
 8002f76:	f7fd fa4f 	bl	8000418 <__aeabi_f2d>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4630      	mov	r0, r6
 8002f80:	4639      	mov	r1, r7
 8002f82:	f7fd faa1 	bl	80004c8 <__aeabi_dmul>
 8002f86:	f000 f88b 	bl	80030a0 <floor>
 8002f8a:	f7fd fd37 	bl	80009fc <__aeabi_d2uiz>
 8002f8e:	6068      	str	r0, [r5, #4]
 8002f90:	4620      	mov	r0, r4
 8002f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f94:	1058      	asrs	r0, r3, #1
 8002f96:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8002f9a:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8002f9e:	428e      	cmp	r6, r1
 8002fa0:	d20f      	bcs.n	8002fc2 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x66>
 8002fa2:	1a1b      	subs	r3, r3, r0
 8002fa4:	1d22      	adds	r2, r4, #4
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	dcf3      	bgt.n	8002f94 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>)
 8002fae:	6814      	ldr	r4, [r2, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d008      	beq.n	8002fc6 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6a>
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7fd fa0d 	bl	80003d4 <__aeabi_ui2d>
 8002fba:	e7d9      	b.n	8002f70 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8002fbc:	23f9      	movs	r3, #249	@ 0xf9
 8002fbe:	4a06      	ldr	r2, [pc, #24]	@ (8002fd8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8002fc0:	e7f2      	b.n	8002fa8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	e7f0      	b.n	8002fa8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 8002fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fca:	e7e0      	b.n	8002f8e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8002fcc:	2401      	movs	r4, #1
 8002fce:	e7df      	b.n	8002f90 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x34>
 8002fd0:	080034e5 	.word	0x080034e5
 8002fd4:	080038f0 	.word	0x080038f0
 8002fd8:	0800350c 	.word	0x0800350c

08002fdc <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8002fdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe0:	4692      	mov	sl, r2
 8002fe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	eb03 0802 	add.w	r8, r3, r2
 8002fea:	684b      	ldr	r3, [r1, #4]
 8002fec:	460d      	mov	r5, r1
 8002fee:	4598      	cmp	r8, r3
 8002ff0:	d946      	bls.n	8003080 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	6808      	ldr	r0, [r1, #0]
 8002ff6:	bf0c      	ite	eq
 8002ff8:	f04f 090b 	moveq.w	r9, #11
 8002ffc:	f04f 0900 	movne.w	r9, #0
 8003000:	f7fd fa0a 	bl	8000418 <__aeabi_f2d>
 8003004:	4606      	mov	r6, r0
 8003006:	460f      	mov	r7, r1
 8003008:	45c8      	cmp	r8, r9
 800300a:	4640      	mov	r0, r8
 800300c:	bf38      	it	cc
 800300e:	4648      	movcc	r0, r9
 8003010:	f7fd f9e0 	bl	80003d4 <__aeabi_ui2d>
 8003014:	4632      	mov	r2, r6
 8003016:	463b      	mov	r3, r7
 8003018:	f7fd fb80 	bl	800071c <__aeabi_ddiv>
 800301c:	4680      	mov	r8, r0
 800301e:	4650      	mov	r0, sl
 8003020:	4689      	mov	r9, r1
 8003022:	f7fd f9d7 	bl	80003d4 <__aeabi_ui2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	e9cd 2300 	strd	r2, r3, [sp]
 800302e:	4642      	mov	r2, r8
 8003030:	464b      	mov	r3, r9
 8003032:	f7fd fcc5 	bl	80009c0 <__aeabi_dcmple>
 8003036:	b1c0      	cbz	r0, 800306a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8003038:	4640      	mov	r0, r8
 800303a:	4649      	mov	r1, r9
 800303c:	f000 f830 	bl	80030a0 <floor>
 8003040:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>)
 8003042:	2200      	movs	r2, #0
 8003044:	f7fd f88a 	bl	800015c <__adddf3>
 8003048:	f7fd fcd8 	bl	80009fc <__aeabi_d2uiz>
 800304c:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8003050:	4281      	cmp	r1, r0
 8003052:	bf38      	it	cc
 8003054:	4601      	movcc	r1, r0
 8003056:	4628      	mov	r0, r5
 8003058:	f7ff ff80 	bl	8002f5c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 800305c:	2301      	movs	r3, #1
 800305e:	6060      	str	r0, [r4, #4]
 8003060:	7023      	strb	r3, [r4, #0]
 8003062:	4620      	mov	r0, r4
 8003064:	b002      	add	sp, #8
 8003066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800306a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800306e:	4630      	mov	r0, r6
 8003070:	4639      	mov	r1, r7
 8003072:	f7fd fa29 	bl	80004c8 <__aeabi_dmul>
 8003076:	f000 f813 	bl	80030a0 <floor>
 800307a:	f7fd fcbf 	bl	80009fc <__aeabi_d2uiz>
 800307e:	6068      	str	r0, [r5, #4]
 8003080:	2300      	movs	r3, #0
 8003082:	e9c4 3300 	strd	r3, r3, [r4]
 8003086:	e7ec      	b.n	8003062 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 8003088:	3ff00000 	.word	0x3ff00000

0800308c <_ZdlPv>:
 800308c:	f000 b898 	b.w	80031c0 <free>

08003090 <_ZSt15get_new_handlerv>:
 8003090:	4b02      	ldr	r3, [pc, #8]	@ (800309c <_ZSt15get_new_handlerv+0xc>)
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	f3bf 8f5b 	dmb	ish
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000108 	.word	0x20000108

080030a0 <floor>:
 80030a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80030a8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80030ac:	2e13      	cmp	r6, #19
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	460c      	mov	r4, r1
 80030b4:	4605      	mov	r5, r0
 80030b6:	4680      	mov	r8, r0
 80030b8:	dc35      	bgt.n	8003126 <floor+0x86>
 80030ba:	2e00      	cmp	r6, #0
 80030bc:	da17      	bge.n	80030ee <floor+0x4e>
 80030be:	a334      	add	r3, pc, #208	@ (adr r3, 8003190 <floor+0xf0>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f7fd f84a 	bl	800015c <__adddf3>
 80030c8:	2200      	movs	r2, #0
 80030ca:	2300      	movs	r3, #0
 80030cc:	f7fd fc8c 	bl	80009e8 <__aeabi_dcmpgt>
 80030d0:	b150      	cbz	r0, 80030e8 <floor+0x48>
 80030d2:	2c00      	cmp	r4, #0
 80030d4:	da57      	bge.n	8003186 <floor+0xe6>
 80030d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80030da:	432c      	orrs	r4, r5
 80030dc:	2500      	movs	r5, #0
 80030de:	42ac      	cmp	r4, r5
 80030e0:	4c2d      	ldr	r4, [pc, #180]	@ (8003198 <floor+0xf8>)
 80030e2:	bf08      	it	eq
 80030e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80030e8:	4623      	mov	r3, r4
 80030ea:	462a      	mov	r2, r5
 80030ec:	e024      	b.n	8003138 <floor+0x98>
 80030ee:	4f2b      	ldr	r7, [pc, #172]	@ (800319c <floor+0xfc>)
 80030f0:	4137      	asrs	r7, r6
 80030f2:	ea01 0c07 	and.w	ip, r1, r7
 80030f6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80030fa:	d01d      	beq.n	8003138 <floor+0x98>
 80030fc:	a324      	add	r3, pc, #144	@ (adr r3, 8003190 <floor+0xf0>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd f82b 	bl	800015c <__adddf3>
 8003106:	2200      	movs	r2, #0
 8003108:	2300      	movs	r3, #0
 800310a:	f7fd fc6d 	bl	80009e8 <__aeabi_dcmpgt>
 800310e:	2800      	cmp	r0, #0
 8003110:	d0ea      	beq.n	80030e8 <floor+0x48>
 8003112:	2c00      	cmp	r4, #0
 8003114:	bfbe      	ittt	lt
 8003116:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800311a:	4133      	asrlt	r3, r6
 800311c:	18e4      	addlt	r4, r4, r3
 800311e:	2500      	movs	r5, #0
 8003120:	ea24 0407 	bic.w	r4, r4, r7
 8003124:	e7e0      	b.n	80030e8 <floor+0x48>
 8003126:	2e33      	cmp	r6, #51	@ 0x33
 8003128:	dd0a      	ble.n	8003140 <floor+0xa0>
 800312a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800312e:	d103      	bne.n	8003138 <floor+0x98>
 8003130:	f7fd f814 	bl	800015c <__adddf3>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003140:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8003144:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003148:	fa2c f707 	lsr.w	r7, ip, r7
 800314c:	4207      	tst	r7, r0
 800314e:	d0f3      	beq.n	8003138 <floor+0x98>
 8003150:	a30f      	add	r3, pc, #60	@ (adr r3, 8003190 <floor+0xf0>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd f801 	bl	800015c <__adddf3>
 800315a:	2200      	movs	r2, #0
 800315c:	2300      	movs	r3, #0
 800315e:	f7fd fc43 	bl	80009e8 <__aeabi_dcmpgt>
 8003162:	2800      	cmp	r0, #0
 8003164:	d0c0      	beq.n	80030e8 <floor+0x48>
 8003166:	2c00      	cmp	r4, #0
 8003168:	da0a      	bge.n	8003180 <floor+0xe0>
 800316a:	2e14      	cmp	r6, #20
 800316c:	d101      	bne.n	8003172 <floor+0xd2>
 800316e:	3401      	adds	r4, #1
 8003170:	e006      	b.n	8003180 <floor+0xe0>
 8003172:	2301      	movs	r3, #1
 8003174:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003178:	40b3      	lsls	r3, r6
 800317a:	441d      	add	r5, r3
 800317c:	4545      	cmp	r5, r8
 800317e:	d3f6      	bcc.n	800316e <floor+0xce>
 8003180:	ea25 0507 	bic.w	r5, r5, r7
 8003184:	e7b0      	b.n	80030e8 <floor+0x48>
 8003186:	2500      	movs	r5, #0
 8003188:	462c      	mov	r4, r5
 800318a:	e7ad      	b.n	80030e8 <floor+0x48>
 800318c:	f3af 8000 	nop.w
 8003190:	8800759c 	.word	0x8800759c
 8003194:	7e37e43c 	.word	0x7e37e43c
 8003198:	bff00000 	.word	0xbff00000
 800319c:	000fffff 	.word	0x000fffff

080031a0 <abort>:
 80031a0:	2006      	movs	r0, #6
 80031a2:	b508      	push	{r3, lr}
 80031a4:	f000 f8f2 	bl	800338c <raise>
 80031a8:	2001      	movs	r0, #1
 80031aa:	f7ff fe3e 	bl	8002e2a <_exit>
	...

080031b0 <malloc>:
 80031b0:	4b02      	ldr	r3, [pc, #8]	@ (80031bc <malloc+0xc>)
 80031b2:	4601      	mov	r1, r0
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f000 b82d 	b.w	8003214 <_malloc_r>
 80031ba:	bf00      	nop
 80031bc:	20000074 	.word	0x20000074

080031c0 <free>:
 80031c0:	4b02      	ldr	r3, [pc, #8]	@ (80031cc <free+0xc>)
 80031c2:	4601      	mov	r1, r0
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	f000 b939 	b.w	800343c <_free_r>
 80031ca:	bf00      	nop
 80031cc:	20000074 	.word	0x20000074

080031d0 <sbrk_aligned>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003210 <sbrk_aligned+0x40>)
 80031d4:	460c      	mov	r4, r1
 80031d6:	6831      	ldr	r1, [r6, #0]
 80031d8:	4605      	mov	r5, r0
 80031da:	b911      	cbnz	r1, 80031e2 <sbrk_aligned+0x12>
 80031dc:	f000 f8f2 	bl	80033c4 <_sbrk_r>
 80031e0:	6030      	str	r0, [r6, #0]
 80031e2:	4621      	mov	r1, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	f000 f8ed 	bl	80033c4 <_sbrk_r>
 80031ea:	1c43      	adds	r3, r0, #1
 80031ec:	d103      	bne.n	80031f6 <sbrk_aligned+0x26>
 80031ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80031f2:	4620      	mov	r0, r4
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
 80031f6:	1cc4      	adds	r4, r0, #3
 80031f8:	f024 0403 	bic.w	r4, r4, #3
 80031fc:	42a0      	cmp	r0, r4
 80031fe:	d0f8      	beq.n	80031f2 <sbrk_aligned+0x22>
 8003200:	1a21      	subs	r1, r4, r0
 8003202:	4628      	mov	r0, r5
 8003204:	f000 f8de 	bl	80033c4 <_sbrk_r>
 8003208:	3001      	adds	r0, #1
 800320a:	d1f2      	bne.n	80031f2 <sbrk_aligned+0x22>
 800320c:	e7ef      	b.n	80031ee <sbrk_aligned+0x1e>
 800320e:	bf00      	nop
 8003210:	2000010c 	.word	0x2000010c

08003214 <_malloc_r>:
 8003214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003218:	1ccd      	adds	r5, r1, #3
 800321a:	f025 0503 	bic.w	r5, r5, #3
 800321e:	3508      	adds	r5, #8
 8003220:	2d0c      	cmp	r5, #12
 8003222:	bf38      	it	cc
 8003224:	250c      	movcc	r5, #12
 8003226:	2d00      	cmp	r5, #0
 8003228:	4606      	mov	r6, r0
 800322a:	db01      	blt.n	8003230 <_malloc_r+0x1c>
 800322c:	42a9      	cmp	r1, r5
 800322e:	d904      	bls.n	800323a <_malloc_r+0x26>
 8003230:	230c      	movs	r3, #12
 8003232:	6033      	str	r3, [r6, #0]
 8003234:	2000      	movs	r0, #0
 8003236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003310 <_malloc_r+0xfc>
 800323e:	f000 f869 	bl	8003314 <__malloc_lock>
 8003242:	f8d8 3000 	ldr.w	r3, [r8]
 8003246:	461c      	mov	r4, r3
 8003248:	bb44      	cbnz	r4, 800329c <_malloc_r+0x88>
 800324a:	4629      	mov	r1, r5
 800324c:	4630      	mov	r0, r6
 800324e:	f7ff ffbf 	bl	80031d0 <sbrk_aligned>
 8003252:	1c43      	adds	r3, r0, #1
 8003254:	4604      	mov	r4, r0
 8003256:	d158      	bne.n	800330a <_malloc_r+0xf6>
 8003258:	f8d8 4000 	ldr.w	r4, [r8]
 800325c:	4627      	mov	r7, r4
 800325e:	2f00      	cmp	r7, #0
 8003260:	d143      	bne.n	80032ea <_malloc_r+0xd6>
 8003262:	2c00      	cmp	r4, #0
 8003264:	d04b      	beq.n	80032fe <_malloc_r+0xea>
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	4639      	mov	r1, r7
 800326a:	4630      	mov	r0, r6
 800326c:	eb04 0903 	add.w	r9, r4, r3
 8003270:	f000 f8a8 	bl	80033c4 <_sbrk_r>
 8003274:	4581      	cmp	r9, r0
 8003276:	d142      	bne.n	80032fe <_malloc_r+0xea>
 8003278:	6821      	ldr	r1, [r4, #0]
 800327a:	4630      	mov	r0, r6
 800327c:	1a6d      	subs	r5, r5, r1
 800327e:	4629      	mov	r1, r5
 8003280:	f7ff ffa6 	bl	80031d0 <sbrk_aligned>
 8003284:	3001      	adds	r0, #1
 8003286:	d03a      	beq.n	80032fe <_malloc_r+0xea>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	442b      	add	r3, r5
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	f8d8 3000 	ldr.w	r3, [r8]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	bb62      	cbnz	r2, 80032f0 <_malloc_r+0xdc>
 8003296:	f8c8 7000 	str.w	r7, [r8]
 800329a:	e00f      	b.n	80032bc <_malloc_r+0xa8>
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	1b52      	subs	r2, r2, r5
 80032a0:	d420      	bmi.n	80032e4 <_malloc_r+0xd0>
 80032a2:	2a0b      	cmp	r2, #11
 80032a4:	d917      	bls.n	80032d6 <_malloc_r+0xc2>
 80032a6:	1961      	adds	r1, r4, r5
 80032a8:	42a3      	cmp	r3, r4
 80032aa:	6025      	str	r5, [r4, #0]
 80032ac:	bf18      	it	ne
 80032ae:	6059      	strne	r1, [r3, #4]
 80032b0:	6863      	ldr	r3, [r4, #4]
 80032b2:	bf08      	it	eq
 80032b4:	f8c8 1000 	streq.w	r1, [r8]
 80032b8:	5162      	str	r2, [r4, r5]
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	4630      	mov	r0, r6
 80032be:	f000 f82f 	bl	8003320 <__malloc_unlock>
 80032c2:	f104 000b 	add.w	r0, r4, #11
 80032c6:	1d23      	adds	r3, r4, #4
 80032c8:	f020 0007 	bic.w	r0, r0, #7
 80032cc:	1ac2      	subs	r2, r0, r3
 80032ce:	bf1c      	itt	ne
 80032d0:	1a1b      	subne	r3, r3, r0
 80032d2:	50a3      	strne	r3, [r4, r2]
 80032d4:	e7af      	b.n	8003236 <_malloc_r+0x22>
 80032d6:	6862      	ldr	r2, [r4, #4]
 80032d8:	42a3      	cmp	r3, r4
 80032da:	bf0c      	ite	eq
 80032dc:	f8c8 2000 	streq.w	r2, [r8]
 80032e0:	605a      	strne	r2, [r3, #4]
 80032e2:	e7eb      	b.n	80032bc <_malloc_r+0xa8>
 80032e4:	4623      	mov	r3, r4
 80032e6:	6864      	ldr	r4, [r4, #4]
 80032e8:	e7ae      	b.n	8003248 <_malloc_r+0x34>
 80032ea:	463c      	mov	r4, r7
 80032ec:	687f      	ldr	r7, [r7, #4]
 80032ee:	e7b6      	b.n	800325e <_malloc_r+0x4a>
 80032f0:	461a      	mov	r2, r3
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	d1fb      	bne.n	80032f0 <_malloc_r+0xdc>
 80032f8:	2300      	movs	r3, #0
 80032fa:	6053      	str	r3, [r2, #4]
 80032fc:	e7de      	b.n	80032bc <_malloc_r+0xa8>
 80032fe:	230c      	movs	r3, #12
 8003300:	4630      	mov	r0, r6
 8003302:	6033      	str	r3, [r6, #0]
 8003304:	f000 f80c 	bl	8003320 <__malloc_unlock>
 8003308:	e794      	b.n	8003234 <_malloc_r+0x20>
 800330a:	6005      	str	r5, [r0, #0]
 800330c:	e7d6      	b.n	80032bc <_malloc_r+0xa8>
 800330e:	bf00      	nop
 8003310:	20000110 	.word	0x20000110

08003314 <__malloc_lock>:
 8003314:	4801      	ldr	r0, [pc, #4]	@ (800331c <__malloc_lock+0x8>)
 8003316:	f000 b88f 	b.w	8003438 <__retarget_lock_acquire_recursive>
 800331a:	bf00      	nop
 800331c:	20000250 	.word	0x20000250

08003320 <__malloc_unlock>:
 8003320:	4801      	ldr	r0, [pc, #4]	@ (8003328 <__malloc_unlock+0x8>)
 8003322:	f000 b88a 	b.w	800343a <__retarget_lock_release_recursive>
 8003326:	bf00      	nop
 8003328:	20000250 	.word	0x20000250

0800332c <memset>:
 800332c:	4603      	mov	r3, r0
 800332e:	4402      	add	r2, r0
 8003330:	4293      	cmp	r3, r2
 8003332:	d100      	bne.n	8003336 <memset+0xa>
 8003334:	4770      	bx	lr
 8003336:	f803 1b01 	strb.w	r1, [r3], #1
 800333a:	e7f9      	b.n	8003330 <memset+0x4>

0800333c <_raise_r>:
 800333c:	291f      	cmp	r1, #31
 800333e:	b538      	push	{r3, r4, r5, lr}
 8003340:	4605      	mov	r5, r0
 8003342:	460c      	mov	r4, r1
 8003344:	d904      	bls.n	8003350 <_raise_r+0x14>
 8003346:	2316      	movs	r3, #22
 8003348:	6003      	str	r3, [r0, #0]
 800334a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003352:	b112      	cbz	r2, 800335a <_raise_r+0x1e>
 8003354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003358:	b94b      	cbnz	r3, 800336e <_raise_r+0x32>
 800335a:	4628      	mov	r0, r5
 800335c:	f000 f830 	bl	80033c0 <_getpid_r>
 8003360:	4622      	mov	r2, r4
 8003362:	4601      	mov	r1, r0
 8003364:	4628      	mov	r0, r5
 8003366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800336a:	f000 b817 	b.w	800339c <_kill_r>
 800336e:	2b01      	cmp	r3, #1
 8003370:	d00a      	beq.n	8003388 <_raise_r+0x4c>
 8003372:	1c59      	adds	r1, r3, #1
 8003374:	d103      	bne.n	800337e <_raise_r+0x42>
 8003376:	2316      	movs	r3, #22
 8003378:	6003      	str	r3, [r0, #0]
 800337a:	2001      	movs	r0, #1
 800337c:	e7e7      	b.n	800334e <_raise_r+0x12>
 800337e:	2100      	movs	r1, #0
 8003380:	4620      	mov	r0, r4
 8003382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003386:	4798      	blx	r3
 8003388:	2000      	movs	r0, #0
 800338a:	e7e0      	b.n	800334e <_raise_r+0x12>

0800338c <raise>:
 800338c:	4b02      	ldr	r3, [pc, #8]	@ (8003398 <raise+0xc>)
 800338e:	4601      	mov	r1, r0
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f7ff bfd3 	b.w	800333c <_raise_r>
 8003396:	bf00      	nop
 8003398:	20000074 	.word	0x20000074

0800339c <_kill_r>:
 800339c:	b538      	push	{r3, r4, r5, lr}
 800339e:	2300      	movs	r3, #0
 80033a0:	4d06      	ldr	r5, [pc, #24]	@ (80033bc <_kill_r+0x20>)
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	f7ff fd2e 	bl	8002e0a <_kill>
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	d102      	bne.n	80033b8 <_kill_r+0x1c>
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	b103      	cbz	r3, 80033b8 <_kill_r+0x1c>
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	bd38      	pop	{r3, r4, r5, pc}
 80033ba:	bf00      	nop
 80033bc:	2000024c 	.word	0x2000024c

080033c0 <_getpid_r>:
 80033c0:	f7ff bd1c 	b.w	8002dfc <_getpid>

080033c4 <_sbrk_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	2300      	movs	r3, #0
 80033c8:	4d05      	ldr	r5, [pc, #20]	@ (80033e0 <_sbrk_r+0x1c>)
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	f7ff fd36 	bl	8002e40 <_sbrk>
 80033d4:	1c43      	adds	r3, r0, #1
 80033d6:	d102      	bne.n	80033de <_sbrk_r+0x1a>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	b103      	cbz	r3, 80033de <_sbrk_r+0x1a>
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	bd38      	pop	{r3, r4, r5, pc}
 80033e0:	2000024c 	.word	0x2000024c

080033e4 <__errno>:
 80033e4:	4b01      	ldr	r3, [pc, #4]	@ (80033ec <__errno+0x8>)
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000074 	.word	0x20000074

080033f0 <__libc_init_array>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	2600      	movs	r6, #0
 80033f4:	4d0c      	ldr	r5, [pc, #48]	@ (8003428 <__libc_init_array+0x38>)
 80033f6:	4c0d      	ldr	r4, [pc, #52]	@ (800342c <__libc_init_array+0x3c>)
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	42a6      	cmp	r6, r4
 80033fe:	d109      	bne.n	8003414 <__libc_init_array+0x24>
 8003400:	f000 f864 	bl	80034cc <_init>
 8003404:	2600      	movs	r6, #0
 8003406:	4d0a      	ldr	r5, [pc, #40]	@ (8003430 <__libc_init_array+0x40>)
 8003408:	4c0a      	ldr	r4, [pc, #40]	@ (8003434 <__libc_init_array+0x44>)
 800340a:	1b64      	subs	r4, r4, r5
 800340c:	10a4      	asrs	r4, r4, #2
 800340e:	42a6      	cmp	r6, r4
 8003410:	d105      	bne.n	800341e <__libc_init_array+0x2e>
 8003412:	bd70      	pop	{r4, r5, r6, pc}
 8003414:	f855 3b04 	ldr.w	r3, [r5], #4
 8003418:	4798      	blx	r3
 800341a:	3601      	adds	r6, #1
 800341c:	e7ee      	b.n	80033fc <__libc_init_array+0xc>
 800341e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003422:	4798      	blx	r3
 8003424:	3601      	adds	r6, #1
 8003426:	e7f2      	b.n	800340e <__libc_init_array+0x1e>
 8003428:	080038f8 	.word	0x080038f8
 800342c:	080038f8 	.word	0x080038f8
 8003430:	080038f8 	.word	0x080038f8
 8003434:	08003900 	.word	0x08003900

08003438 <__retarget_lock_acquire_recursive>:
 8003438:	4770      	bx	lr

0800343a <__retarget_lock_release_recursive>:
 800343a:	4770      	bx	lr

0800343c <_free_r>:
 800343c:	b538      	push	{r3, r4, r5, lr}
 800343e:	4605      	mov	r5, r0
 8003440:	2900      	cmp	r1, #0
 8003442:	d040      	beq.n	80034c6 <_free_r+0x8a>
 8003444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003448:	1f0c      	subs	r4, r1, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	bfb8      	it	lt
 800344e:	18e4      	addlt	r4, r4, r3
 8003450:	f7ff ff60 	bl	8003314 <__malloc_lock>
 8003454:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <_free_r+0x8c>)
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	b933      	cbnz	r3, 8003468 <_free_r+0x2c>
 800345a:	6063      	str	r3, [r4, #4]
 800345c:	6014      	str	r4, [r2, #0]
 800345e:	4628      	mov	r0, r5
 8003460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003464:	f7ff bf5c 	b.w	8003320 <__malloc_unlock>
 8003468:	42a3      	cmp	r3, r4
 800346a:	d908      	bls.n	800347e <_free_r+0x42>
 800346c:	6820      	ldr	r0, [r4, #0]
 800346e:	1821      	adds	r1, r4, r0
 8003470:	428b      	cmp	r3, r1
 8003472:	bf01      	itttt	eq
 8003474:	6819      	ldreq	r1, [r3, #0]
 8003476:	685b      	ldreq	r3, [r3, #4]
 8003478:	1809      	addeq	r1, r1, r0
 800347a:	6021      	streq	r1, [r4, #0]
 800347c:	e7ed      	b.n	800345a <_free_r+0x1e>
 800347e:	461a      	mov	r2, r3
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	b10b      	cbz	r3, 8003488 <_free_r+0x4c>
 8003484:	42a3      	cmp	r3, r4
 8003486:	d9fa      	bls.n	800347e <_free_r+0x42>
 8003488:	6811      	ldr	r1, [r2, #0]
 800348a:	1850      	adds	r0, r2, r1
 800348c:	42a0      	cmp	r0, r4
 800348e:	d10b      	bne.n	80034a8 <_free_r+0x6c>
 8003490:	6820      	ldr	r0, [r4, #0]
 8003492:	4401      	add	r1, r0
 8003494:	1850      	adds	r0, r2, r1
 8003496:	4283      	cmp	r3, r0
 8003498:	6011      	str	r1, [r2, #0]
 800349a:	d1e0      	bne.n	800345e <_free_r+0x22>
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4408      	add	r0, r1
 80034a2:	6010      	str	r0, [r2, #0]
 80034a4:	6053      	str	r3, [r2, #4]
 80034a6:	e7da      	b.n	800345e <_free_r+0x22>
 80034a8:	d902      	bls.n	80034b0 <_free_r+0x74>
 80034aa:	230c      	movs	r3, #12
 80034ac:	602b      	str	r3, [r5, #0]
 80034ae:	e7d6      	b.n	800345e <_free_r+0x22>
 80034b0:	6820      	ldr	r0, [r4, #0]
 80034b2:	1821      	adds	r1, r4, r0
 80034b4:	428b      	cmp	r3, r1
 80034b6:	bf01      	itttt	eq
 80034b8:	6819      	ldreq	r1, [r3, #0]
 80034ba:	685b      	ldreq	r3, [r3, #4]
 80034bc:	1809      	addeq	r1, r1, r0
 80034be:	6021      	streq	r1, [r4, #0]
 80034c0:	6063      	str	r3, [r4, #4]
 80034c2:	6054      	str	r4, [r2, #4]
 80034c4:	e7cb      	b.n	800345e <_free_r+0x22>
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	20000110 	.word	0x20000110

080034cc <_init>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	bf00      	nop
 80034d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d2:	bc08      	pop	{r3}
 80034d4:	469e      	mov	lr, r3
 80034d6:	4770      	bx	lr

080034d8 <_fini>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	bf00      	nop
 80034dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034de:	bc08      	pop	{r3}
 80034e0:	469e      	mov	lr, r3
 80034e2:	4770      	bx	lr
